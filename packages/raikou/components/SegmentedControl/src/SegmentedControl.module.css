.root {
  @mixin where-light {
    --raikou-segmentedcontrol-background-color: #f1f3f5;
    --raikou-segmentedcontrol-indicator-background-color: #fff;
    --raikou-segmentedcontrol-label-color: #495057;
    --raikou-segmentedcontrol-label-fieldset-disabled-color: #adb5bd;
    --raikou-segmentedcontrol-label-active-color: #000;
    --raikou-segmentedcontrol-label-before-active-color: #fff;
    --raikou-segmentedcontrol-label-hover-disabled-color: #000;
    --raikou-segmentedcontrol-label-fieldset-disabled-hover-color: #adb5bd;
    --raikou-segmentedcontrol-separator-color: #dee2e6;
  }
  @mixin where-dark {
    --raikou-segmentedcontrol-background-color: #141517;
    --raikou-segmentedcontrol-indicator-background-color: #2c2e33;
    --raikou-segmentedcontrol-label-color: #a6a7ab;
    --raikou-segmentedcontrol-label-fieldset-disabled-color: #5c5f66;
    --raikou-segmentedcontrol-label-active-color: #fff;
    --raikou-segmentedcontrol-label-before-active-color: #2c2e33;
    --raikou-segmentedcontrol-label-hover-disabled-color: #fff;
    --raikou-segmentedcontrol-label-fieldset-disabled-hover-color: #5c5f66;
    --raikou-segmentedcontrol-separator-color: #373a40;
  }

  --sc-padding-xs: 3px 6px;
  --sc-padding-sm: 5px 10px;
  --sc-padding-md: 7px 14px;
  --sc-padding-lg: 9px 16px;
  --sc-padding-xl: 12px 20px;

  --sc-transition-duration: 200ms;
  --sc-padding: var(--sc-padding-sm);
  --sc-transition-timing-function: ease;
  --sc-font-size: var(--raikou-font-size-sm);

  position: relative;
  display: inline-flex;
  flex-direction: row;
  width: auto;
  border-radius: var(--sc-radius, var(--raikou-radius-default));
  overflow: hidden;
  padding: 4px;

  &:where([data-full-width]) {
    display: flex;
  }

  &:where([data-orientation="vertical"]) {
    display: flex;
    flex-direction: column;
    width: max-content;

    &:where([data-full-width]) {
      width: auto;
    }
  }

  @mixin where-light {
    background-color: var(--raikou-segmentedcontrol-background-color);
  }

  @mixin where-dark {
    background-color: var(--raikou-segmentedcontrol-background-color);
  }
}

.indicator {
  position: absolute;
  display: block;
  z-index: 1;
  border-radius: var(--sc-radius, var(--raikou-radius-default));

  @mixin where-light {
    box-shadow: var(--sc-shadow, none);
    background-color: var(
      --sc-color,
      var(--raikou-segmentedcontrol-indicator-background-color)
    );
  }

  @mixin where-dark {
    box-shadow: none;
    background-color: var(
      --sc-color,
      var(--raikou-segmentedcontrol-indicator-background-color)
    );
  }
}

.label {
  -webkit-tap-highlight-color: transparent;
  font-weight: 500;
  display: block;
  text-align: center;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
  user-select: none;
  border-radius: var(--sc-radius, var(--raikou-radius-default));
  font-size: var(--sc-font-size);
  padding: var(--sc-padding);
  transition: color var(--sc-transition-duration)
    var(--sc-transition-timing-function);
  cursor: pointer;

  /* outline is controlled by .input */
  outline: var(--segmented-control-outline, none);

  @mixin where-light {
    color: var(--raikou-segmentedcontrol-label-color);
  }

  @mixin where-dark {
    color: var(--raikou-segmentedcontrol-label-color);
  }

  &:where([data-read-only]) {
    cursor: default;
  }

  fieldset:disabled &,
  &:where([data-disabled]) {
    cursor: not-allowed;

    @mixin where-light {
      color: var(--raikou-segmentedcontrol-label-fieldset-disabled-color);
    }

    @mixin where-dark {
      color: var(--raikou-segmentedcontrol-label-fieldset-disabled-color);
    }
  }

  &:where([data-active]) {
    @mixin where-light {
      color: var(
        --sc-label-color,
        var(--raikou-segmentedcontrol-label-active-color)
      );
    }

    @mixin where-dark {
      color: var(
        --sc-label-color,
        var(--raikou-segmentedcontrol-label-active-color)
      );
    }

    &::before {
      .root:where([data-initialized]) & {
        display: none;
      }
      content: "";
      inset: 0;
      z-index: 0;
      position: absolute;
      border-radius: var(--sc-radius, var(--raikou-radius-default));

      @mixin where-light {
        box-shadow: var(--sc-shadow, none);
        background-color: var(
          --sc-color,
          var(--raikou-segmentedcontrol-label-before-active-color)
        );
      }

      @mixin where-dark {
        box-shadow: none;
        background-color: var(
          --sc-color,
          var(--raikou-segmentedcontrol-label-before-active-color)
        );
      }
    }
  }

  &:where(:not([data-disabled], [data-active], [data-read-only])) {
    @mixin hover {
      @mixin where-light {
        color: var(--raikou-segmentedcontrol-label-hover-disabled-color);
      }

      @mixin where-dark {
        color: var(--raikou-segmentedcontrol-label-hover-disabled-color);
      }
    }
  }

  fieldset:disabled & {
    @mixin hover {
      @mixin where-light {
        color: var(
          --raikou-segmentedcontrol-label-fieldset-disabled-hover-color
        ) !important;
      }

      @mixin where-dark {
        color: var(
          --raikou-segmentedcontrol-label-fieldset-disabled-hover-color
        ) !important;
      }
    }
  }
}

.input {
  height: 0;
  width: 0;
  position: absolute;
  overflow: hidden;
  white-space: nowrap;
  opacity: 0;

  &[data-focus-ring="auto"] {
    &:focus:focus-visible {
      & + .label {
        --segmented-control-outline: 2px solid
          var(--raikou-primary-color-filled);
      }
    }
  }

  &[data-focus-ring="always"] {
    &:focus {
      & + .label {
        --segmented-control-outline: 2px solid
          var(--raikou-primary-color-filled);
      }
    }
  }
}

.control {
  position: relative;
  flex: 1;
  z-index: 2;
  transition: border-color var(--sc-transition-duration)
    var(--sc-transition-timing-function);

  .root[data-with-items-borders] :where(&)::before {
    content: "";
    position: absolute;
    top: 0;
    bottom: 0;
    inset-inline-start: 0;
    background-color: var(--separator-color);
    width: 1px;
    transition: background-color var(--sc-transition-duration)
      var(--sc-transition-timing-function);
  }

  &[data-orientation="vertical"] {
    &::before {
      top: 0;
      inset-inline: 0;
      bottom: auto;
      height: 1px;
      width: auto;
    }
  }

  @mixin where-light {
    --separator-color: var(--raikou-segmentedcontrol-separator-color);
  }

  @mixin where-dark {
    --separator-color: var(--raikou-segmentedcontrol-separator-color);
  }

  &:first-of-type {
    &::before {
      --separator-color: transparent;
    }
  }

  &[data-active] {
    [data-raikou-color-scheme] & {
      &,
      & + .control {
        &::before {
          --separator-color: transparent;
        }
      }
    }
  }
}

.innerLabel {
  position: relative;
  z-index: 2;
}
