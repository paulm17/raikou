{"version":3,"sources":["../src/Chip.tsx","../../_utils/create-safe-context/create-safe-context.tsx","../../_utils/create-optional-context/create-optional-context.tsx","../../_utils/use-hovered/use-hovered.ts","../../_utils/create-use-external-events/create-use-external-events.ts","../../Checkbox/src/CheckIcon.tsx","../src/ChipGroup.context.ts","../src/ChipGroup/ChipGroup.tsx","css-module:./Chip.module.css#css-module"],"sourcesContent":["import React from \"react\";\nimport { useId, useUncontrolled } from \"@raikou/hooks\";\nimport {\n  Box,\n  BoxProps,\n  StylesApiProps,\n  factory,\n  ElementProps,\n  useProps,\n  useStyles,\n  createVarsResolver,\n  Factory,\n  RaikouRadius,\n  RaikouSize,\n  RaikouColor,\n  extractStyleProps,\n  getSize,\n  getRadius,\n  getFontSize,\n} from \"@raikou/core\";\nimport { CheckIcon } from \"../../Checkbox/src\";\nimport { useChipGroupContext } from \"./ChipGroup.context\";\nimport { ChipGroup } from \"./ChipGroup/ChipGroup\";\nimport classes from \"./Chip.module.css\";\n\nexport type ChipStylesNames =\n  | \"root\"\n  | \"input\"\n  | \"iconWrapper\"\n  | \"checkIcon\"\n  | \"label\";\nexport type ChipVariant = \"outline\" | \"filled\" | \"light\";\nexport type ChipCssVariables = {\n  root:\n    | \"--chip-fz\"\n    | \"--chip-size\"\n    | \"--chip-icon-size\"\n    | \"--chip-padding\"\n    | \"--chip-checked-padding\"\n    | \"--chip-radius\"\n    | \"--chip-bg\"\n    | \"--chip-hover\"\n    | \"--chip-color\"\n    | \"--chip-bd\"\n    | \"--chip-spacing\";\n};\n\nexport interface ChipProps\n  extends BoxProps,\n    StylesApiProps<ChipFactory>,\n    ElementProps<\"input\", \"size\" | \"onChange\"> {\n  /** Key of `theme.radius` or any valid CSS value to set `border-radius`, `'xl'` by default */\n  radius?: RaikouRadius;\n\n  /** Controls various properties, `'sm'` by default */\n  size?: RaikouSize;\n\n  /** Chip input type */\n  type?: \"radio\" | \"checkbox\";\n\n  /** Chip label */\n  children: React.ReactNode;\n\n  /** Checked state for controlled component */\n  checked?: boolean;\n\n  /** Default checked state for uncontrolled component */\n  defaultChecked?: boolean;\n\n  /** Calls when checked state changes */\n  onChange?: (checked: boolean) => void;\n\n  /** Key of `theme.colors` or any valid CSS color, `theme.primaryColor` */\n  color?: RaikouColor;\n\n  /** Static id to bind input with label */\n  id?: string;\n\n  /** Props passed down to the wrapper element */\n  wrapperProps?: Record<string, any>;\n\n  /** Replaces default icon */\n  icon?: React.ReactNode;\n\n  /** Assigns ref of the root element, can be used with `Tooltip` and other similar components */\n  rootRef?: React.ForwardedRef<HTMLDivElement>;\n\n  /** Determines whether button text color with filled variant should depend on `background-color`. If luminosity of the `color` prop is less than `theme.luminosityThreshold`, then `theme.white` will be used for text color, otherwise `theme.black`. Overrides `theme.autoContrast`. */\n  autoContrast?: boolean;\n}\n\nexport type ChipFactory = Factory<{\n  props: ChipProps;\n  ref: HTMLInputElement;\n  stylesNames: ChipStylesNames;\n  vars: ChipCssVariables;\n  variant: ChipVariant;\n  staticComponents: {\n    Group: typeof ChipGroup;\n  };\n}>;\n\nconst defaultProps: Partial<ChipProps> = {\n  type: \"checkbox\",\n};\n\nconst varsResolver = createVarsResolver<ChipFactory>(\n  (theme, { size, radius, variant, color, autoContrast }) => {\n    const colors = theme.variantColorResolver({\n      color: color || theme.primaryColor,\n      theme,\n      variant: variant || \"filled\",\n      autoContrast,\n    });\n\n    return {\n      root: {\n        \"--chip-fz\": getFontSize(size),\n        \"--chip-size\": getSize(size, \"chip-size\"),\n        \"--chip-radius\": radius === undefined ? undefined : getRadius(radius),\n        \"--chip-checked-padding\": getSize(size, \"chip-checked-padding\"),\n        \"--chip-padding\": getSize(size, \"chip-padding\"),\n        \"--chip-icon-size\": getSize(size, \"chip-icon-size\"),\n        \"--chip-bg\": color || variant ? colors.background : undefined,\n        \"--chip-hover\": color || variant ? colors.hover : undefined,\n        \"--chip-color\": color || variant ? colors.color : undefined,\n        \"--chip-bd\": color || variant ? colors.border : undefined,\n        \"--chip-spacing\": getSize(size, \"chip-spacing\"),\n      },\n    };\n  },\n);\n\nexport const Chip = factory<ChipFactory>((_props, ref) => {\n  const props = useProps(\"Chip\", defaultProps, _props);\n  const {\n    classNames,\n    className,\n    style,\n    styles,\n    unstyled,\n    vars,\n    id,\n    checked,\n    defaultChecked,\n    onChange,\n    value,\n    wrapperProps,\n    type,\n    disabled,\n    children,\n    size,\n    variant,\n    icon,\n    rootRef,\n    autoContrast,\n    mod,\n    ...others\n  } = props;\n\n  const getStyles = useStyles<ChipFactory>({\n    name: \"Chip\",\n    classes,\n    props,\n    className,\n    style,\n    classNames,\n    styles,\n    unstyled,\n    vars,\n    varsResolver,\n  });\n\n  const ctx = useChipGroupContext();\n  const uuid = useId(id);\n  const { styleProps, rest } = extractStyleProps(others);\n\n  const [_value, setValue] = useUncontrolled({\n    value: checked,\n    defaultValue: defaultChecked,\n    finalValue: false,\n    onChange,\n  });\n\n  const contextProps = ctx\n    ? {\n        checked: ctx.isChipSelected(value as string),\n        onChange: (event: React.ChangeEvent<HTMLInputElement>) => {\n          ctx.onChange(event);\n          onChange?.(event.currentTarget.checked);\n        },\n        type: ctx.multiple ? \"checkbox\" : \"radio\",\n      }\n    : {};\n\n  const _checked = contextProps.checked || _value;\n\n  return (\n    <Box\n      size={size}\n      variant={variant}\n      ref={rootRef}\n      mod={mod}\n      {...getStyles(\"root\")}\n      {...styleProps}\n      {...wrapperProps}\n    >\n      <input\n        type={type}\n        {...getStyles(\"input\")}\n        checked={_checked}\n        onChange={(event) => setValue(event.currentTarget.checked)}\n        id={uuid}\n        disabled={disabled}\n        ref={ref}\n        value={value}\n        {...contextProps}\n        {...rest}\n      />\n\n      <label\n        htmlFor={uuid}\n        data-checked={_checked || undefined}\n        data-disabled={disabled || undefined}\n        {...getStyles(\"label\", { variant: variant || \"filled\" })}\n      >\n        {_checked && (\n          <span {...getStyles(\"iconWrapper\")}>\n            {icon || <CheckIcon {...getStyles(\"checkIcon\")} />}\n          </span>\n        )}\n        {children}\n      </label>\n    </Box>\n  );\n});\n\nChip.displayName = \"@raikou/core/Chip\";\nChip.Group = ChipGroup;\n","import React, { createContext, useContext } from 'react';\n\nexport function createSafeContext<ContextValue>(errorMessage: string) {\n  const Context = createContext<ContextValue | null>(null);\n\n  const useSafeContext = () => {\n    const ctx = useContext(Context);\n\n    if (ctx === null) {\n      throw new Error(errorMessage);\n    }\n\n    return ctx;\n  };\n\n  const Provider = ({ children, value }: { value: ContextValue; children: React.ReactNode }) => (\n    <Context.Provider value={value}>{children}</Context.Provider>\n  );\n\n  return [Provider, useSafeContext] as const;\n}\n","import React, { createContext, useContext } from 'react';\n\nexport function createOptionalContext<ContextValue>(initialValue: ContextValue | null = null) {\n  const Context = createContext<ContextValue | null>(initialValue);\n\n  const useOptionalContext = () => useContext(Context);\n\n  const Provider = ({ children, value }: { value: ContextValue; children: React.ReactNode }) => (\n    <Context.Provider value={value}>{children}</Context.Provider>\n  );\n\n  return [Provider, useOptionalContext] as const;\n}\n","import { useState } from 'react';\n\nexport function useHovered() {\n  const [hovered, setHovered] = useState<number | null>(-1);\n  const resetHovered = () => setHovered(-1);\n  return [hovered, { setHovered, resetHovered }] as const;\n}\n","import { useEffect, useLayoutEffect } from 'react';\n\nfunction dispatchEvent<T>(type: string, detail?: T) {\n  window.dispatchEvent(new CustomEvent(type, { detail }));\n}\n\nconst useIsomorphicEffect = typeof window !== 'undefined' ? useLayoutEffect : useEffect;\n\nexport function createUseExternalEvents<Handlers extends Record<string, (detail: any) => void>>(\n  prefix: string\n) {\n  function _useExternalEvents(events: Handlers) {\n    const handlers = Object.keys(events).reduce<any>((acc, eventKey) => {\n      acc[`${prefix}:${eventKey}`] = (event: CustomEvent) => events[eventKey](event.detail);\n      return acc;\n    }, {});\n\n    useIsomorphicEffect(() => {\n      Object.keys(handlers).forEach((eventKey) => {\n        window.removeEventListener(eventKey, handlers[eventKey]);\n        window.addEventListener(eventKey, handlers[eventKey]);\n      });\n\n      return () =>\n        Object.keys(handlers).forEach((eventKey) => {\n          window.removeEventListener(eventKey, handlers[eventKey]);\n        });\n    }, [handlers]);\n  }\n\n  function createEvent<EventKey extends keyof Handlers>(event: EventKey) {\n    type Parameter = Parameters<Handlers[EventKey]>[0];\n\n    return (...payload: Parameter extends undefined ? [undefined?] : [Parameter]) =>\n      dispatchEvent(`${prefix}:${String(event)}`, payload[0]);\n  }\n\n  return [_useExternalEvents, createEvent] as const;\n}\n","import React from \"react\";\nimport { rem } from \"@raikou/core\";\n\nexport interface CheckboxIconProps\n  extends React.ComponentPropsWithoutRef<\"svg\"> {\n  indeterminate: boolean | undefined;\n}\n\nexport interface CheckIconProps extends React.ComponentPropsWithoutRef<\"svg\"> {\n  size?: number | string;\n}\n\nexport function CheckIcon({ size, style, ...others }: CheckIconProps) {\n  const _style =\n    size !== undefined\n      ? { width: rem(size), height: rem(size), ...style }\n      : style;\n\n  return (\n    <svg\n      viewBox=\"0 0 10 7\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      style={_style}\n      aria-hidden\n      {...others}\n    >\n      <path\n        d=\"M4 4.586L1.707 2.293A1 1 0 1 0 .293 3.707l3 3a.997.997 0 0 0 1.414 0l5-5A1 1 0 1 0 8.293.293L4 4.586z\"\n        fill=\"currentColor\"\n        fillRule=\"evenodd\"\n        clipRule=\"evenodd\"\n      />\n    </svg>\n  );\n}\n\nexport function CheckboxIcon({ indeterminate, ...others }: CheckboxIconProps) {\n  if (indeterminate) {\n    return (\n      <svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        fill=\"none\"\n        viewBox=\"0 0 32 6\"\n        aria-hidden\n        {...others}\n      >\n        <rect width=\"32\" height=\"6\" fill=\"currentColor\" rx=\"3\" />\n      </svg>\n    );\n  }\n\n  return <CheckIcon {...others} />;\n}\n","import { createOptionalContext } from \"../../_utils\";\n\ninterface ChipGroupContextValue {\n  isChipSelected: (value: string) => boolean;\n  onChange: (event: React.ChangeEvent<HTMLInputElement>) => void;\n  multiple: boolean;\n}\n\nexport const [ChipGroupProvider, useChipGroupContext] =\n  createOptionalContext<ChipGroupContextValue>();\n","/* eslint-disable react/no-unused-prop-types */\nimport React from \"react\";\nimport { useUncontrolled } from \"@raikou/hooks\";\nimport { useProps } from \"@raikou/core\";\nimport { ChipGroupProvider } from \"../ChipGroup.context\";\n\nexport interface ChipGroupProps<T extends boolean = false> {\n  /** Allow multiple values to be selected at a time */\n  multiple?: T;\n\n  /** Controlled component value */\n  value?: T extends true ? string[] : string | null;\n\n  /** Uncontrolled component initial value */\n  defaultValue?: T extends true ? string[] : string | null;\n\n  /** Called when value changes */\n  onChange?: (value: T extends true ? string[] : string) => void;\n\n  /** <Chip /> components */\n  children?: React.ReactNode;\n}\n\nconst defaultProps: Partial<ChipGroupProps<false>> = {};\n\nexport function ChipGroup<T extends boolean>(props: ChipGroupProps<T>) {\n  const { value, defaultValue, onChange, multiple, children } = useProps(\n    \"ChipGroup\",\n    defaultProps as any,\n    props,\n  );\n\n  const [_value, setValue] = useUncontrolled<string | null | string[]>({\n    value,\n    defaultValue,\n    finalValue: multiple ? ([] as string[]) : null,\n    onChange,\n  });\n\n  const isChipSelected = (val: string) =>\n    Array.isArray(_value) ? _value.includes(val) : val === _value;\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const val = event.currentTarget.value;\n    if (Array.isArray(_value)) {\n      setValue(\n        _value.includes(val)\n          ? _value.filter((v) => v !== val)\n          : [..._value, val],\n      );\n    } else {\n      setValue(val);\n    }\n  };\n\n  return (\n    <ChipGroupProvider\n      value={{ isChipSelected, onChange: handleChange, multiple }}\n    >\n      {children}\n    </ChipGroupProvider>\n  );\n}\n\nChipGroup.displayName = \"@raikou/core/ChipGroup\";\n","import \"/Users/paul/development/src/github/raikou/packages/raikou/components/Chip/src/Chip.module.css\"; export default {\"root\":\"m-f59ffda3\",\"label\":\"m-be049a53\",\"label--outline\":\"m-3904c1af\",\"label--filled\":\"m-fa109255\",\"label--light\":\"m-f7e165c3\",\"iconWrapper\":\"m-9ac86df9\",\"checkIcon\":\"m-d6d72580\",\"input\":\"m-bde07329\"}"],"mappings":"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","names":["React","useUncontrolled","useProps","React","createContext","useContext","React","React","React","React","defaultProps","useProps","useUncontrolled","React"]}