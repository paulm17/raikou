{"version":3,"sources":["../src/Table.tsx","../src/Table.components.tsx","../src/store.ts","../src/TableDataRenderer.tsx","css-module:./Table.module.css#css-module"],"sourcesContent":["import React from \"react\";\nimport {\n  Box,\n  BoxProps,\n  StylesApiProps,\n  factory,\n  ElementProps,\n  useProps,\n  useStyles,\n  RaikouColor,\n  RaikouSpacing,\n  getSpacing,\n  getThemeColor,\n  createVarsResolver,\n  Factory,\n} from \"@raikou/core\";\nimport {\n  TableCaption,\n  TableTbody,\n  TableTd,\n  TableTfoot,\n  TableTh,\n  TableTr,\n  TableThead,\n} from \"./Table.components\";\nimport { TableDataRenderer } from \"./TableDataRenderer\";\nimport { useStore } from \"./store\";\nimport classes from \"./Table.module.css\";\n\nexport type TableStylesNames =\n  | \"table\"\n  | \"thead\"\n  | \"tbody\"\n  | \"tfoot\"\n  | \"tr\"\n  | \"th\"\n  | \"td\"\n  | \"caption\";\n\nexport type TableCssVariables = {\n  table:\n    | \"--table-layout\"\n    | \"--table-border-color\"\n    | \"--table-caption-side\"\n    | \"--table-horizontal-spacing\"\n    | \"--table-vertical-spacing\"\n    | \"--table-striped-color\"\n    | \"--table-highlight-on-hover-color\";\n};\n\nexport interface TableData {\n  head?: React.ReactNode[];\n  body?: React.ReactNode[][];\n  foot?: React.ReactNode[];\n  caption?: string;\n}\n\nexport interface TableProps\n  extends BoxProps,\n    StylesApiProps<TableFactory>,\n    ElementProps<\"table\"> {\n  /** Value of `table-layout` style, `auto` by default */\n  layout?: React.CSSProperties[\"tableLayout\"];\n\n  /** Determines on which side `Table.Caption` is displayed, `bottom` by default */\n  captionSide?: \"top\" | \"bottom\";\n\n  /** Color of table borders, key of `theme.colors` or any valid CSS color */\n  borderColor?: RaikouColor;\n\n  /** Determines whether the table should have outer border, `false` by default */\n  withTableBorder?: boolean;\n\n  /** Determines whether the table should have borders between columns, `false` by default */\n  withColumnBorders?: boolean;\n\n  /** Determines whether the table should have borders between rows, `true` by default */\n  withRowBorders?: boolean;\n\n  /** Horizontal cells spacing, key of `theme.spacing` or any valid CSS value for padding, numbers are converted to rem, default value is `xs` */\n  horizontalSpacing?: RaikouSpacing;\n\n  /** Vertical cells spacing, key of `theme.spacing` or any valid CSS value for padding, numbers are converted to rem, default value is `xs` */\n  verticalSpacing?: RaikouSpacing;\n\n  /** Determines whether every odd/even row background should be changed to `strippedColor`, if set to `true`, then `odd` value will be used, `false` by default  */\n  striped?: boolean | \"odd\" | \"even\";\n\n  /** Background color of striped rows, key of `theme.colors` or any valid CSS color */\n  stripedColor?: RaikouColor;\n\n  /** Determines whether table rows background should change to `highlightOnHoverColor` when hovered, `false` by default */\n  highlightOnHover?: boolean;\n\n  /** Background color of table rows when hovered, key of `theme.colors` or any valid CSS color */\n  highlightOnHoverColor?: RaikouColor;\n\n  /** Data that should be used to generate table, ignored if `children` prop is set */\n  data?: TableData;\n}\n\nexport type TableFactory = Factory<{\n  props: TableProps;\n  ref: HTMLTableElement;\n  stylesNames: TableStylesNames;\n  vars: TableCssVariables;\n  staticComponents: {\n    Thead: typeof TableThead;\n    Tbody: typeof TableTbody;\n    Tfoot: typeof TableTfoot;\n    Td: typeof TableTd;\n    Th: typeof TableTh;\n    Tr: typeof TableTr;\n    Caption: typeof TableCaption;\n    DataRenderer: typeof TableDataRenderer;\n  };\n}>;\n\nconst defaultProps: Partial<TableProps> = {\n  withRowBorders: true,\n  verticalSpacing: 7,\n};\n\nconst varsResolver = createVarsResolver<TableFactory>(\n  (\n    theme,\n    {\n      layout,\n      captionSide,\n      horizontalSpacing,\n      verticalSpacing,\n      borderColor,\n      stripedColor,\n      highlightOnHoverColor,\n      striped,\n      highlightOnHover,\n    },\n  ) => ({\n    table: {\n      \"--table-layout\": layout,\n      \"--table-caption-side\": captionSide,\n      \"--table-horizontal-spacing\": getSpacing(horizontalSpacing),\n      \"--table-vertical-spacing\": getSpacing(verticalSpacing),\n      \"--table-border-color\": borderColor\n        ? getThemeColor(borderColor, theme)\n        : undefined,\n      \"--table-striped-color\":\n        striped && stripedColor\n          ? getThemeColor(stripedColor, theme)\n          : undefined,\n      \"--table-highlight-on-hover-color\":\n        highlightOnHover && highlightOnHoverColor\n          ? getThemeColor(highlightOnHoverColor, theme)\n          : undefined,\n    },\n  }),\n);\n\nexport const Table = factory<TableFactory>((_props, ref) => {\n  const props = useProps(\"Table\", defaultProps, _props);\n  const {\n    classNames,\n    className,\n    style,\n    styles,\n    unstyled,\n    vars,\n    horizontalSpacing,\n    verticalSpacing,\n    captionSide,\n    stripedColor,\n    highlightOnHoverColor,\n    striped,\n    highlightOnHover,\n    withColumnBorders,\n    withRowBorders,\n    withTableBorder,\n    borderColor,\n    layout,\n    variant,\n    data,\n    children,\n    ...others\n  } = props;\n\n  const getStyles = useStyles<TableFactory>({\n    name: \"Table\",\n    props,\n    className,\n    style,\n    classes,\n    classNames,\n    styles,\n    unstyled,\n    rootSelector: \"table\",\n    vars,\n    varsResolver,\n  });\n\n  useStore.update((state) => {\n    state.getStyles = getStyles;\n    state.striped = striped === true ? \"odd\" : striped || undefined;\n    state.highlightOnHover = highlightOnHover;\n    state.withColumnBorders = withColumnBorders;\n    state.withRowBorders = withRowBorders;\n    state.captionSide = captionSide || \"bottom\";\n  });\n\n  return (\n    <Box\n      component=\"table\"\n      variant={variant}\n      ref={ref}\n      mod={{ \"data-with-table-border\": withTableBorder }}\n      {...getStyles(\"table\")}\n      {...others}\n    >\n      {children || (!!data && <TableDataRenderer data={data} />)}\n    </Box>\n  );\n});\n\nTable.classes = classes;\nTable.displayName = \"@raikou/core/Table\";\nTable.Td = TableTd;\nTable.Th = TableTh;\nTable.Tr = TableTr;\nTable.Thead = TableThead;\nTable.Tbody = TableTbody;\nTable.Tfoot = TableTfoot;\nTable.Caption = TableCaption;\nTable.DataRenderer = TableDataRenderer;\n","import React from \"react\";\nimport {\n  Box,\n  BoxProps,\n  CompoundStylesApiProps,\n  ElementProps,\n  factory,\n  useProps,\n  FactoryPayload,\n  Factory,\n} from \"@raikou/core\";\nimport type { TableFactory } from \"./Table\";\nimport { TableContextValue, useStore } from \"./store\";\n\nexport interface TableElementProps<Selector extends string>\n  extends BoxProps,\n    CompoundStylesApiProps<\n      Omit<TableFactory, \"stylesNames\"> & { stylesNames: Selector }\n    > {}\n\nexport interface TableThProps\n  extends TableElementProps<\"th\">,\n    ElementProps<\"th\"> {}\nexport interface TableTdProps\n  extends TableElementProps<\"td\">,\n    ElementProps<\"td\"> {}\nexport interface TableTrProps\n  extends TableElementProps<\"tr\">,\n    ElementProps<\"tr\"> {}\nexport interface TableTheadProps\n  extends TableElementProps<\"thead\">,\n    ElementProps<\"thead\"> {}\nexport interface TableTbodyProps\n  extends TableElementProps<\"tbody\">,\n    ElementProps<\"tbody\"> {}\nexport interface TableTfootProps\n  extends TableElementProps<\"tfoot\">,\n    ElementProps<\"tfoot\"> {}\nexport interface TableCaptionProps\n  extends TableElementProps<\"caption\">,\n    ElementProps<\"caption\"> {}\n\nexport type TableThFactory = Factory<{\n  props: TableThProps;\n  ref: HTMLTableCellElement;\n  stylesNames: \"th\";\n  compound: true;\n}>;\n\nexport type TableTdFactory = Factory<{\n  props: TableTdProps;\n  ref: HTMLTableCellElement;\n  stylesNames: \"td\";\n  compound: true;\n}>;\n\nexport type TableTrFactory = Factory<{\n  props: TableTrProps;\n  ref: HTMLTableRowElement;\n  stylesNames: \"tr\";\n  compound: true;\n}>;\n\nexport type TableTheadFactory = Factory<{\n  props: TableTheadProps;\n  ref: HTMLTableSectionElement;\n  stylesNames: \"thead\";\n  compound: true;\n}>;\n\nexport type TableTbodyFactory = Factory<{\n  props: TableTbodyProps;\n  ref: HTMLTableSectionElement;\n  stylesNames: \"tbody\";\n  compound: true;\n}>;\n\nexport type TableTfootFactory = Factory<{\n  props: TableTfootProps;\n  ref: HTMLTableSectionElement;\n  stylesNames: \"tfoot\";\n  compound: true;\n}>;\n\nexport type TableCaptionFactory = Factory<{\n  props: TableCaptionProps;\n  ref: HTMLTableCaptionElement;\n  stylesNames: \"caption\";\n  compound: true;\n}>;\n\ninterface TableElementOptions {\n  columnBorder?: true;\n  rowBorder?: true;\n  striped?: true;\n  highlightOnHover?: true;\n  captionSide?: true;\n}\n\nfunction getDataAttributes(\n  ctx: TableContextValue,\n  options?: TableElementOptions,\n) {\n  if (!options) {\n    return undefined;\n  }\n\n  const data: Record<string, boolean | string> = {};\n\n  if (options.columnBorder && ctx.withColumnBorders) {\n    data[\"data-with-column-border\"] = true;\n  }\n\n  if (options.rowBorder && ctx.withRowBorders) {\n    data[\"data-with-row-border\"] = true;\n  }\n\n  if (options.striped && ctx.striped) {\n    data[\"data-striped\"] = ctx.striped;\n  }\n\n  if (options.highlightOnHover && ctx.highlightOnHover) {\n    data[\"data-hover\"] = true;\n  }\n\n  if (options.captionSide && ctx.captionSide) {\n    data[\"data-side\"] = ctx.captionSide;\n  }\n\n  return data;\n}\n\nexport function tableElement<Factory extends FactoryPayload>(\n  element: \"th\" | \"td\" | \"tr\" | \"thead\" | \"tbody\" | \"tfoot\" | \"caption\",\n  options?: TableElementOptions,\n) {\n  const name = `Table${element.charAt(0).toUpperCase()}${element.slice(1)}`;\n  const Component = factory<Factory>((_props, ref) => {\n    const props = useProps(name, {}, _props);\n    const { classNames, className, style, styles, ...others } = props;\n\n    const ctx = useStore.getState();\n\n    return (\n      <Box\n        component={element}\n        ref={ref}\n        {...getDataAttributes(ctx, options)}\n        {...ctx.getStyles(element, {\n          className,\n          classNames,\n          style,\n          styles,\n          props,\n        })}\n        {...others}\n      />\n    );\n  });\n\n  Component.displayName = `@raikou/core/${name}`;\n  return Component;\n}\n\nexport const TableTh = tableElement<TableThFactory>(\"th\", {\n  columnBorder: true,\n});\nexport const TableTd = tableElement<TableTdFactory>(\"td\", {\n  columnBorder: true,\n});\nexport const TableTr = tableElement<TableTrFactory>(\"tr\", {\n  rowBorder: true,\n  striped: true,\n  highlightOnHover: true,\n});\nexport const TableThead = tableElement<TableTheadFactory>(\"thead\");\nexport const TableTbody = tableElement<TableTbodyFactory>(\"tbody\");\nexport const TableTfoot = tableElement<TableTfootFactory>(\"tfoot\");\nexport const TableCaption = tableElement<TableCaptionFactory>(\"caption\", {\n  captionSide: true,\n});\n","import { GetStylesApi } from \"@raikou/core\";\nimport type { TableFactory } from \"./Table\";\nimport createStore from \"pure-store\";\n\nexport type TableContextValue = {\n  getStyles: GetStylesApi<TableFactory> | any;\n  striped: \"odd\" | \"even\" | undefined;\n  highlightOnHover: boolean | undefined;\n  withColumnBorders: boolean | undefined;\n  withRowBorders: boolean | undefined;\n  captionSide: \"top\" | \"bottom\";\n};\n\nexport const useStore = createStore<TableContextValue>({\n  getStyles: undefined,\n  striped: undefined,\n  highlightOnHover: undefined,\n  withColumnBorders: undefined,\n  withRowBorders: undefined,\n  captionSide: \"top\",\n});\n","import React from 'react';\nimport {\n  TableTd,\n  TableTr,\n  TableTh,\n  TableTbody,\n  TableTfoot,\n  TableThead,\n  TableCaption,\n} from './Table.components';\nimport type { TableData } from './Table';\n\nexport interface TableDataRendererProps {\n  data: TableData;\n}\n\nexport function TableDataRenderer({ data }: TableDataRendererProps) {\n  return (\n    <>\n      {data.caption && <TableCaption>{data.caption}</TableCaption>}\n\n      {data.head && (\n        <TableThead>\n          <TableTr>\n            {data.head.map((item, index) => (\n              <TableTh key={index}>{item}</TableTh>\n            ))}\n          </TableTr>\n        </TableThead>\n      )}\n\n      {data.body && (\n        <TableTbody>\n          {data.body.map((row, rowIndex) => (\n            <TableTr key={rowIndex}>\n              {row.map((item, index) => (\n                <TableTd key={index}>{item}</TableTd>\n              ))}\n            </TableTr>\n          ))}\n        </TableTbody>\n      )}\n\n      {data.foot && (\n        <TableTfoot>\n          <TableTr>\n            {data.foot.map((item, index) => (\n              <TableTh key={index}>{item}</TableTh>\n            ))}\n          </TableTr>\n        </TableTfoot>\n      )}\n    </>\n  );\n}\n\nTableDataRenderer.displayName = '@mantine/core/TableDataRenderer';\n","import \"/Users/paul/development/src/github/raikou/packages/raikou/components/Table/src/Table.module.css\"; export default {\"table\":\"m-b23fa0ef\",\"th\":\"m-4e7aa4f3\",\"tr\":\"m-4e7aa4fd\",\"td\":\"m-4e7aa4ef\",\"tbody\":\"m-b2404537\",\"thead\":\"m-b242d975\",\"caption\":\"m-9e5a3ac7\",\"scrollContainer\":\"m-a100c15\",\"scrollContainerInner\":\"m-62259741\"}"],"mappings":"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","names":["React","Box","factory","useProps","React","React","factory","useProps","React","Box"]}