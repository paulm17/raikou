{"version":3,"sources":["../src/Progress.tsx","../src/ProgressRoot/ProgressRoot.tsx","../../_utils/create-safe-context/create-safe-context.tsx","../../_utils/create-optional-context/create-optional-context.tsx","../../_utils/use-hovered/use-hovered.ts","../../_utils/create-use-external-events/create-use-external-events.ts","../src/Progress.context.ts","css-module:../Progress.module.css#css-module","../src/ProgressSection/ProgressSection.tsx","../src/ProgressLabel/ProgressLabel.tsx"],"sourcesContent":["import React from \"react\";\nimport {\n  StylesApiProps,\n  factory,\n  useProps,\n  Factory,\n  useResolvedStylesApi,\n  RaikouColor,\n} from \"@raikou/core\";\nimport {\n  ProgressRoot,\n  ProgressRootStylesNames,\n  ProgressRootCssVariables,\n  __ProgressRootProps,\n} from \"./ProgressRoot/ProgressRoot\";\nimport { ProgressSection } from \"./ProgressSection/ProgressSection\";\nimport { ProgressLabel } from \"./ProgressLabel/ProgressLabel\";\n\nexport type ProgressStylesNames = ProgressRootStylesNames;\n\nexport interface ProgressProps\n  extends __ProgressRootProps,\n    StylesApiProps<ProgressFactory> {\n  /** Value of the progress */\n  value: number;\n\n  /** Key of `theme.colors` or any valid CSS value, `theme.primaryColor` by default */\n  color?: RaikouColor;\n\n  /** Determines whether the section should have stipes, `false` by default */\n  striped?: boolean;\n\n  /** Determines whether the sections stripes should be animated, if set, `striped` prop is ignored, `false` by default */\n  animated?: boolean;\n}\n\nexport type ProgressFactory = Factory<{\n  props: ProgressProps;\n  ref: HTMLDivElement;\n  stylesNames: ProgressStylesNames;\n  vars: ProgressRootCssVariables;\n  staticComponents: {\n    Section: typeof ProgressSection;\n    Root: typeof ProgressRoot;\n    Label: typeof ProgressLabel;\n  };\n}>;\n\nconst defaultProps: Partial<ProgressProps> = {};\n\nexport const Progress = factory<ProgressFactory>((_props, ref) => {\n  const props = useProps(\"Progress\", defaultProps, _props);\n  const {\n    value,\n    classNames,\n    styles,\n    vars,\n    color,\n    striped,\n    animated,\n    \"aria-label\": label,\n    ...others\n  } = props;\n\n  const { resolvedClassNames, resolvedStyles } =\n    useResolvedStylesApi<ProgressFactory>({\n      classNames,\n      styles,\n      props,\n    });\n\n  return (\n    <ProgressRoot\n      ref={ref}\n      classNames={resolvedClassNames}\n      styles={resolvedStyles}\n      vars={vars as any}\n      {...others}\n    >\n      <ProgressSection\n        value={value}\n        color={color}\n        striped={striped}\n        animated={animated}\n        aria-label={label}\n      />\n    </ProgressRoot>\n  );\n});\n\nProgress.displayName = \"@raikou/core/Progress\";\nProgress.Section = ProgressSection;\nProgress.Root = ProgressRoot;\nProgress.Label = ProgressLabel;\n","import React from \"react\";\nimport {\n  Box,\n  BoxProps,\n  StylesApiProps,\n  factory,\n  ElementProps,\n  useProps,\n  useStyles,\n  createVarsResolver,\n  Factory,\n  RaikouSize,\n  RaikouRadius,\n  getSize,\n  getRadius,\n} from \"@raikou/core\";\nimport { ProgressProvider } from \"../Progress.context\";\nimport classes from \"../Progress.module.css\";\n\nexport type ProgressRootStylesNames = \"root\" | \"section\" | \"label\";\nexport type ProgressRootCssVariables = {\n  root: \"--progress-size\" | \"--progress-radius\";\n};\n\nexport interface __ProgressRootProps extends BoxProps, ElementProps<\"div\"> {\n  /** Controls track height, `'md'` by default */\n  size?: RaikouSize | (string & {}) | number;\n\n  /** Key of `theme.radius` or any valid CSS value to set `border-radius`, `theme.defaultRadius` by default */\n  radius?: RaikouRadius;\n\n  /** Determines whether label text color should depend on `background-color`. If luminosity of the `color` prop is less than `theme.luminosityThreshold`, then `theme.white` will be used for text color, otherwise `theme.black`. Overrides `theme.autoContrast`. */\n  autoContrast?: boolean;\n\n  /** Controls sections width transition duration, value is specified in ms, `100` by default */\n  transitionDuration?: number;\n}\n\nexport interface ProgressRootProps\n  extends __ProgressRootProps,\n    StylesApiProps<ProgressRootFactory> {}\n\nexport type ProgressRootFactory = Factory<{\n  props: ProgressRootProps;\n  ref: HTMLDivElement;\n  stylesNames: ProgressRootStylesNames;\n  vars: ProgressRootCssVariables;\n}>;\n\nconst defaultProps: Partial<ProgressRootProps> = {};\n\nconst varsResolver = createVarsResolver<ProgressRootFactory>(\n  (_, { size, radius, transitionDuration }) => ({\n    root: {\n      \"--progress-size\": getSize(size, \"progress-size\"),\n      \"--progress-radius\": radius === undefined ? undefined : getRadius(radius),\n      \"--progress-transition-duration\":\n        typeof transitionDuration === \"number\"\n          ? `${transitionDuration}ms`\n          : undefined,\n    },\n  }),\n);\n\nexport const ProgressRoot = factory<ProgressRootFactory>((_props, ref) => {\n  const props = useProps(\"ProgressRoot\", defaultProps, _props);\n  const {\n    classNames,\n    className,\n    style,\n    styles,\n    unstyled,\n    vars,\n    autoContrast,\n    transitionDuration,\n    ...others\n  } = props;\n\n  const getStyles = useStyles<ProgressRootFactory>({\n    name: \"Progress\",\n    classes,\n    props,\n    className,\n    style,\n    classNames,\n    styles,\n    unstyled,\n    vars,\n    varsResolver,\n  });\n\n  return (\n    <ProgressProvider value={{ getStyles, autoContrast }}>\n      <Box ref={ref} {...getStyles(\"root\")} {...others} />\n    </ProgressProvider>\n  );\n});\n\nProgressRoot.displayName = \"@raikou/core/ProgressRoot\";\n","import React, { createContext, useContext } from 'react';\n\nexport function createSafeContext<ContextValue>(errorMessage: string) {\n  const Context = createContext<ContextValue | null>(null);\n\n  const useSafeContext = () => {\n    const ctx = useContext(Context);\n\n    if (ctx === null) {\n      throw new Error(errorMessage);\n    }\n\n    return ctx;\n  };\n\n  const Provider = ({ children, value }: { value: ContextValue; children: React.ReactNode }) => (\n    <Context.Provider value={value}>{children}</Context.Provider>\n  );\n\n  return [Provider, useSafeContext] as const;\n}\n","import React, { createContext, useContext } from 'react';\n\nexport function createOptionalContext<ContextValue>(initialValue: ContextValue | null = null) {\n  const Context = createContext<ContextValue | null>(initialValue);\n\n  const useOptionalContext = () => useContext(Context);\n\n  const Provider = ({ children, value }: { value: ContextValue; children: React.ReactNode }) => (\n    <Context.Provider value={value}>{children}</Context.Provider>\n  );\n\n  return [Provider, useOptionalContext] as const;\n}\n","import { useState } from 'react';\n\nexport function useHovered() {\n  const [hovered, setHovered] = useState<number | null>(-1);\n  const resetHovered = () => setHovered(-1);\n  return [hovered, { setHovered, resetHovered }] as const;\n}\n","import { useEffect, useLayoutEffect } from 'react';\n\nfunction dispatchEvent<T>(type: string, detail?: T) {\n  window.dispatchEvent(new CustomEvent(type, { detail }));\n}\n\nconst useIsomorphicEffect = typeof window !== 'undefined' ? useLayoutEffect : useEffect;\n\nexport function createUseExternalEvents<Handlers extends Record<string, (detail: any) => void>>(\n  prefix: string\n) {\n  function _useExternalEvents(events: Handlers) {\n    const handlers = Object.keys(events).reduce<any>((acc, eventKey) => {\n      acc[`${prefix}:${eventKey}`] = (event: CustomEvent) => events[eventKey](event.detail);\n      return acc;\n    }, {});\n\n    useIsomorphicEffect(() => {\n      Object.keys(handlers).forEach((eventKey) => {\n        window.removeEventListener(eventKey, handlers[eventKey]);\n        window.addEventListener(eventKey, handlers[eventKey]);\n      });\n\n      return () =>\n        Object.keys(handlers).forEach((eventKey) => {\n          window.removeEventListener(eventKey, handlers[eventKey]);\n        });\n    }, [handlers]);\n  }\n\n  function createEvent<EventKey extends keyof Handlers>(event: EventKey) {\n    type Parameter = Parameters<Handlers[EventKey]>[0];\n\n    return (...payload: Parameter extends undefined ? [undefined?] : [Parameter]) =>\n      dispatchEvent(`${prefix}:${String(event)}`, payload[0]);\n  }\n\n  return [_useExternalEvents, createEvent] as const;\n}\n","import { GetStylesApi } from \"@raikou/core\";\nimport { createSafeContext } from \"../../_utils\";\nimport type { ProgressRootFactory } from \"./ProgressRoot/ProgressRoot\";\n\ninterface ProgressContextValue {\n  getStyles: GetStylesApi<ProgressRootFactory>;\n  autoContrast: boolean | undefined;\n}\n\nexport const [ProgressProvider, useProgressContext] =\n  createSafeContext<ProgressContextValue>(\n    \"Progress.Root component was not found in tree\",\n  );\n","import \"/Users/paul/development/src/github/raikou/packages/raikou/components/Progress/src/Progress.module.css\"; export default {\"root\":\"m-db6d6462\",\"section\":\"m-2242eb65\",\"stripes-animation\":\"m-81a374bd\",\"label\":\"m-91e40b74\"}","import React from \"react\";\nimport {\n  Box,\n  BoxProps,\n  CompoundStylesApiProps,\n  factory,\n  ElementProps,\n  useProps,\n  Factory,\n  getAutoContrastValue,\n  getContrastColor,\n  RaikouColor,\n  useRaikouTheme,\n  getThemeColor,\n} from \"@raikou/core\";\nimport { useProgressContext } from \"../Progress.context\";\n\nexport type ProgressSectionStylesNames = \"section\";\n\nexport interface ProgressSectionProps\n  extends BoxProps,\n    CompoundStylesApiProps<ProgressSectionFactory>,\n    ElementProps<\"div\"> {\n  /** Value of the section in 0â€“100 range  */\n  value: number;\n\n  /** Determines whether `aria-*` props should be added to the root element, `true` by default */\n  withAria?: boolean;\n\n  /** Key of `theme.colors` or any valid CSS value, `theme.primaryColor` by default */\n  color?: RaikouColor;\n\n  /** Determines whether the section should have stipes, `false` by default */\n  striped?: boolean;\n\n  /** Determines whether the sections stripes should be animated, if set, `striped` prop is ignored, `false` by default */\n  animated?: boolean;\n}\n\nexport type ProgressSectionFactory = Factory<{\n  props: ProgressSectionProps;\n  ref: HTMLDivElement;\n  stylesNames: ProgressSectionStylesNames;\n  compound: true;\n}>;\n\nconst defaultProps: Partial<ProgressSectionProps> = {\n  withAria: true,\n};\n\nexport const ProgressSection = factory<ProgressSectionFactory>((props, ref) => {\n  const {\n    classNames,\n    className,\n    style,\n    styles,\n    vars,\n    value,\n    withAria,\n    color,\n    striped,\n    animated,\n    mod,\n    ...others\n  } = useProps(\"ProgressSection\", defaultProps, props);\n\n  const ctx = useProgressContext();\n  const theme = useRaikouTheme();\n\n  const ariaAttributes = withAria\n    ? {\n        role: \"progressbar\",\n        \"aria-valuemax\": 100,\n        \"aria-valuemin\": 0,\n        \"aria-valuenow\": value,\n        \"aria-valuetext\": `${value}%`,\n      }\n    : {};\n\n  return (\n    <Box\n      ref={ref}\n      {...ctx.getStyles(\"section\", { className, classNames, styles, style })}\n      {...others}\n      {...ariaAttributes}\n      mod={[{ striped: striped || animated, animated }, mod]}\n      __vars={{\n        \"--progress-section-width\": `${value}%`,\n        \"--progress-section-color\": getThemeColor(color, theme),\n        \"--progress-label-color\": getAutoContrastValue(ctx.autoContrast, theme)\n          ? getContrastColor({ color, theme, autoContrast: ctx.autoContrast })\n          : undefined,\n      }}\n    />\n  );\n});\n\nProgressSection.displayName = \"@raikou/core/ProgressSection\";\n","import React from \"react\";\nimport {\n  Box,\n  BoxProps,\n  CompoundStylesApiProps,\n  factory,\n  ElementProps,\n  useProps,\n  Factory,\n} from \"@raikou/core\";\nimport { useProgressContext } from \"../Progress.context\";\n\nexport type ProgressLabelStylesNames = \"label\";\n\nexport interface ProgressLabelProps\n  extends BoxProps,\n    CompoundStylesApiProps<ProgressLabelFactory>,\n    ElementProps<\"div\"> {}\n\nexport type ProgressLabelFactory = Factory<{\n  props: ProgressLabelProps;\n  ref: HTMLDivElement;\n  stylesNames: ProgressLabelStylesNames;\n  compound: true;\n}>;\n\nconst defaultProps: Partial<ProgressLabelProps> = {};\n\nexport const ProgressLabel = factory<ProgressLabelFactory>((props, ref) => {\n  const { classNames, className, style, styles, vars, ...others } = useProps(\n    \"ProgressLabel\",\n    defaultProps,\n    props,\n  );\n\n  const ctx = useProgressContext();\n\n  return (\n    <Box\n      ref={ref}\n      {...ctx.getStyles(\"label\", { className, style, classNames, styles })}\n      {...others}\n    />\n  );\n});\n\nProgressLabel.displayName = \"@raikou/core/ProgressLabel\";\n"],"mappings":"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","names":["React","factory","useProps","React","React","createContext","useContext","React","React","Box","factory","useProps","defaultProps","factory","useProps","React","Box","React","Box","factory","useProps","defaultProps","factory","useProps","React","Box","defaultProps","factory","useProps","React"]}