{"version":3,"sources":["../src/index.ts","../src/FocusTrap.tsx"],"sourcesContent":["export { FocusTrap } from './FocusTrap';\nexport type { FocusTrapProps } from './FocusTrap';\n","import React, { cloneElement } from \"react\";\nimport { useFocusTrap, useMergedRef } from \"@raikou/hooks\";\nimport { isElement } from \"@raikou/core\";\n\nexport interface FocusTrapProps {\n  /** Element at which focus should be trapped, should support ref prop */\n  children: any;\n\n  /** Determines whether focus should be trapped within child element */\n  active?: boolean;\n\n  /** Prop that should be used to access component ref */\n  refProp?: string;\n}\n\nexport function FocusTrap({\n  children,\n  active = true,\n  refProp = \"ref\",\n}: FocusTrapProps): React.ReactElement {\n  const focusTrapRef = useFocusTrap(active);\n  const ref = useMergedRef(focusTrapRef, children?.ref);\n\n  if (!isElement(children)) {\n    return children;\n  }\n\n  return cloneElement(children, { [refProp]: ref });\n}\n\nFocusTrap.displayName = \"@raikou/core/FocusTrap\";\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACAA,mBAAoC;AACpC,mBAA2C;AAC3C,kBAA0B;AAanB,SAAS,UAAU;AAAA,EACxB;AAAA,EACA,SAAS;AAAA,EACT,UAAU;AACZ,GAAuC;AACrC,QAAM,mBAAe,2BAAa,MAAM;AACxC,QAAM,UAAM,2BAAa,cAAc,qCAAU,GAAG;AAEpD,MAAI,KAAC,uBAAU,QAAQ,GAAG;AACxB,WAAO;AAAA,EACT;AAEA,aAAO,2BAAa,UAAU,EAAE,CAAC,OAAO,GAAG,IAAI,CAAC;AAClD;AAEA,UAAU,cAAc;","names":[]}