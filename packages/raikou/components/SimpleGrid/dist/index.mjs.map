{"version":3,"sources":["../src/SimpleGrid.tsx","../src/SimpleGridVariables.tsx","css-module:./SimpleGrid.module.css#css-module"],"sourcesContent":["import React from \"react\";\nimport {\n  Box,\n  BoxProps,\n  StylesApiProps,\n  factory,\n  ElementProps,\n  useProps,\n  useStyles,\n  Factory,\n  useRandomClassName,\n  StyleProp,\n  RaikouSpacing,\n} from \"@raikou/core\";\nimport {\n  SimpleGridContainerVariables,\n  SimpleGridMediaVariables,\n} from \"./SimpleGridVariables\";\nimport classes from \"./SimpleGrid.module.css\";\n\nexport type SimpleGridStylesNames = \"root\" | \"container\";\n\nexport interface SimpleGridProps\n  extends BoxProps,\n    StylesApiProps<SimpleGridFactory>,\n    ElementProps<\"div\"> {\n  /** Number of columns, `1` by default */\n  cols?: StyleProp<number>;\n\n  /** Spacing between columns, `'md'` by default */\n  spacing?: StyleProp<RaikouSpacing>;\n\n  /** Spacing between rows, `'md'` by default */\n  verticalSpacing?: StyleProp<RaikouSpacing>;\n\n  /** Determines typeof of queries that are used for responsive styles, `'media'` by default */\n  type?: \"media\" | \"container\";\n}\n\nexport type SimpleGridFactory = Factory<{\n  props: SimpleGridProps;\n  ref: HTMLDivElement;\n  stylesNames: SimpleGridStylesNames;\n}>;\n\nconst defaultProps: Partial<SimpleGridProps> = {\n  cols: 1,\n  spacing: \"md\",\n  type: \"media\",\n};\n\nexport const SimpleGrid = factory<SimpleGridFactory>((_props, ref) => {\n  const props = useProps(\"SimpleGrid\", defaultProps, _props);\n  const {\n    classNames,\n    className,\n    style,\n    styles,\n    unstyled,\n    vars,\n    cols,\n    verticalSpacing,\n    spacing,\n    type,\n    ...others\n  } = props;\n\n  const getStyles = useStyles<SimpleGridFactory>({\n    name: \"SimpleGrid\",\n    classes,\n    props,\n    className,\n    style,\n    classNames,\n    styles,\n    unstyled,\n    vars,\n  });\n\n  const responsiveClassName = useRandomClassName();\n\n  if (type === \"container\") {\n    return (\n      <>\n        <div>\n          <SimpleGridContainerVariables\n            {...props}\n            selector={`.${responsiveClassName}`}\n          />\n        </div>\n        <div {...getStyles(\"container\")}>\n          <Box\n            ref={ref}\n            {...getStyles(\"root\", { className: responsiveClassName })}\n            {...others}\n          />\n        </div>\n      </>\n    );\n  }\n\n  // encapsulate GridVariables in a div due to it nerfing\n  // data-raikou-styles=\"system\"\n\n  return (\n    <>\n      <div>\n        <SimpleGridMediaVariables\n          {...props}\n          selector={`.${responsiveClassName}`}\n        />\n      </div>\n      <Box\n        ref={ref}\n        {...getStyles(\"root\", { className: responsiveClassName })}\n        {...others}\n      />\n    </>\n  );\n});\n\nSimpleGrid.classes = classes;\nSimpleGrid.displayName = \"@raikou/core/SimpleGrid\";\n","import React from \"react\";\nimport {\n  getSortedBreakpoints,\n  useRaikouTheme,\n  keys,\n  getSpacing,\n  RaikouBreakpoint,\n  filterProps,\n  InlineStyles,\n  getBaseValue,\n  px,\n} from \"@raikou/core\";\nimport type { SimpleGridProps } from \"./SimpleGrid\";\n\ninterface SimpleGridVariablesProps extends SimpleGridProps {\n  selector: string;\n}\n\nexport function SimpleGridMediaVariables({\n  spacing,\n  verticalSpacing,\n  cols,\n  selector,\n}: SimpleGridVariablesProps) {\n  const theme = useRaikouTheme();\n  const _verticalSpacing =\n    verticalSpacing === undefined ? spacing : verticalSpacing;\n\n  const baseStyles: Record<string, string | undefined> = filterProps({\n    \"--sg-spacing-x\": getSpacing(getBaseValue(spacing)),\n    \"--sg-spacing-y\": getSpacing(getBaseValue(_verticalSpacing)),\n    \"--sg-cols\": getBaseValue(cols)?.toString(),\n  });\n\n  const queries = keys(theme.breakpoints).reduce<\n    Record<string, Record<string, any>>\n  >((acc, breakpoint) => {\n    if (!acc[breakpoint]) {\n      acc[breakpoint] = {};\n    }\n\n    if (typeof spacing === \"object\" && spacing[breakpoint] !== undefined) {\n      acc[breakpoint][\"--sg-spacing-x\"] = getSpacing(spacing[breakpoint]);\n    }\n\n    if (\n      typeof _verticalSpacing === \"object\" &&\n      _verticalSpacing[breakpoint] !== undefined\n    ) {\n      acc[breakpoint][\"--sg-spacing-y\"] = getSpacing(\n        _verticalSpacing[breakpoint],\n      );\n    }\n\n    if (typeof cols === \"object\" && cols[breakpoint] !== undefined) {\n      acc[breakpoint][\"--sg-cols\"] = cols[breakpoint];\n    }\n\n    return acc;\n  }, {});\n\n  const sortedBreakpoints = getSortedBreakpoints(keys(queries), theme).filter(\n    (breakpoint) => keys(queries[breakpoint.value]).length > 0,\n  );\n\n  const media = sortedBreakpoints.map((breakpoint) => ({\n    query: `(min-width: ${\n      theme.breakpoints[breakpoint.value as RaikouBreakpoint]\n    })`,\n    styles: queries[breakpoint.value],\n  }));\n\n  return <InlineStyles styles={baseStyles} media={media} selector={selector} />;\n}\n\nfunction getBreakpoints(values: unknown) {\n  if (typeof values === \"object\" && values !== null) {\n    return keys(values);\n  }\n\n  return [];\n}\n\nfunction sortBreakpoints(breakpoints: string[]) {\n  return breakpoints.sort((a, b) => (px(a) as number) - (px(b) as number));\n}\n\nfunction getUniqueBreakpoints({\n  spacing,\n  verticalSpacing,\n  cols,\n}: Omit<SimpleGridVariablesProps, \"selector\">) {\n  const breakpoints = Array.from(\n    new Set([\n      ...getBreakpoints(spacing),\n      ...getBreakpoints(verticalSpacing),\n      ...getBreakpoints(cols),\n    ]),\n  );\n\n  return sortBreakpoints(breakpoints);\n}\n\nexport function SimpleGridContainerVariables({\n  spacing,\n  verticalSpacing,\n  cols,\n  selector,\n}: SimpleGridVariablesProps) {\n  const _verticalSpacing =\n    verticalSpacing === undefined ? spacing : verticalSpacing;\n\n  const baseStyles: Record<string, string | undefined> = filterProps({\n    \"--sg-spacing-x\": getSpacing(getBaseValue(spacing)),\n    \"--sg-spacing-y\": getSpacing(getBaseValue(_verticalSpacing)),\n    \"--sg-cols\": getBaseValue(cols)?.toString(),\n  });\n\n  const uniqueBreakpoints = getUniqueBreakpoints({\n    spacing,\n    verticalSpacing,\n    cols,\n  });\n\n  const queries = uniqueBreakpoints.reduce<Record<string, Record<string, any>>>(\n    (acc, breakpoint) => {\n      if (!acc[breakpoint]) {\n        acc[breakpoint] = {};\n      }\n\n      if (typeof spacing === \"object\" && spacing[breakpoint] !== undefined) {\n        acc[breakpoint][\"--sg-spacing-x\"] = getSpacing(spacing[breakpoint]);\n      }\n\n      if (\n        typeof _verticalSpacing === \"object\" &&\n        _verticalSpacing[breakpoint] !== undefined\n      ) {\n        acc[breakpoint][\"--sg-spacing-y\"] = getSpacing(\n          _verticalSpacing[breakpoint],\n        );\n      }\n\n      if (typeof cols === \"object\" && cols[breakpoint] !== undefined) {\n        acc[breakpoint][\"--sg-cols\"] = cols[breakpoint];\n      }\n\n      return acc;\n    },\n    {},\n  );\n\n  const media = uniqueBreakpoints.map((breakpoint) => ({\n    query: `simple-grid (min-width: ${breakpoint})`,\n    styles: queries[breakpoint],\n  }));\n\n  return (\n    <InlineStyles styles={baseStyles} container={media} selector={selector} />\n  );\n}\n","import \"/Users/paul/development/src/github/raikou/packages/raikou/components/SimpleGrid/src/SimpleGrid.module.css\"; export default {\"container\":\"m-925c2d2c\",\"root\":\"m-2415a157\"}"],"mappings":"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","names":["React","React"]}