{"version":3,"sources":["../src/index.ts","../src/Indicator.tsx","../src/get-position-variables/get-position-variables.ts","css-module:./Indicator.module.css#css-module"],"sourcesContent":["export { Indicator } from './Indicator';\nexport type {\n  IndicatorCssVariables,\n  IndicatorFactory,\n  IndicatorPositionVariables,\n  IndicatorProps,\n  IndicatorStylesNames,\n} from './Indicator';\n","import React from \"react\";\nimport {\n  Box,\n  BoxProps,\n  StylesApiProps,\n  factory,\n  ElementProps,\n  useProps,\n  useStyles,\n  createVarsResolver,\n  Factory,\n  RaikouRadius,\n  RaikouColor,\n  getThemeColor,\n  rem,\n  getRadius,\n} from \"@raikou/core\";\nimport { getPositionVariables } from \"./get-position-variables/get-position-variables\";\nimport { IndicatorPosition } from \"./Indicator.types\";\nimport classes from \"./Indicator.module.css\";\n\nexport type IndicatorPositionVariables =\n  | \"--indicator-top\"\n  | \"--indicator-bottom\"\n  | \"--indicator-left\"\n  | \"--indicator-right\"\n  | \"--indicator-translate-x\"\n  | \"--indicator-translate-y\";\n\nexport type IndicatorStylesNames = \"root\" | \"indicator\";\nexport type IndicatorCssVariables = {\n  root:\n    | \"--indicator-color\"\n    | \"--indicator-size\"\n    | \"--indicator-radius\"\n    | \"--indicator-z-index\"\n    | IndicatorPositionVariables;\n};\n\nexport interface IndicatorProps\n  extends BoxProps,\n    StylesApiProps<IndicatorFactory>,\n    ElementProps<\"div\"> {\n  /** Indicator position relative to the target element, `'top-end'` by default */\n  position?: IndicatorPosition;\n\n  /** Indicator offset relative to the target element, usually used for elements with border-radius, equals to `size` by default */\n  offset?: number;\n\n  /** Determines whether the indicator container should be an inline element, `false` by default */\n  inline?: boolean;\n\n  /** Indicator width and height, `10` by default */\n  size?: number | string;\n\n  /** Label rendered inside the indicator, for example, notification count */\n  label?: React.ReactNode;\n\n  /** Key of `theme.radius` or any valid CSS value to set `border-radius`, `100` by default */\n  radius?: RaikouRadius;\n\n  /** Key of `theme.colors` or any valid CSS color value, `theme.primaryColor` by default */\n  color?: RaikouColor;\n\n  /** Determines whether the indicator should have a border (color of the border is the same as the body element), `false` by default */\n  withBorder?: boolean;\n\n  /** When Indicator is disabled it renders children only */\n  disabled?: boolean;\n\n  /** Determines whether the indicator should have processing animation, `false` by default */\n  processing?: boolean;\n\n  /** Indicator z-index, `200` by default */\n  zIndex?: React.CSSProperties[\"zIndex\"];\n}\n\nexport type IndicatorFactory = Factory<{\n  props: IndicatorProps;\n  ref: HTMLDivElement;\n  stylesNames: IndicatorStylesNames;\n  vars: IndicatorCssVariables;\n}>;\n\nconst defaultProps: Partial<IndicatorProps> = {\n  position: \"top-end\",\n  offset: 0,\n  inline: false,\n  withBorder: false,\n  disabled: false,\n  processing: false,\n  size: 10,\n};\n\nconst varsResolver = createVarsResolver<IndicatorFactory>(\n  (theme, { color, position, offset, size, radius, zIndex }) => ({\n    root: {\n      \"--indicator-color\": color ? getThemeColor(color, theme) : undefined,\n      \"--indicator-size\": rem(size),\n      \"--indicator-radius\":\n        radius === undefined ? undefined : getRadius(radius),\n      \"--indicator-z-index\": zIndex?.toString(),\n      ...getPositionVariables(position, offset),\n    },\n  }),\n);\n\nexport const Indicator = factory<IndicatorFactory>((_props, ref) => {\n  const props = useProps(\"Indicator\", defaultProps, _props);\n  const {\n    classNames,\n    className,\n    style,\n    styles,\n    unstyled,\n    vars,\n    children,\n    position,\n    offset,\n    inline,\n    label,\n    radius,\n    color,\n    withBorder,\n    disabled,\n    processing,\n    zIndex,\n    ...others\n  } = props;\n\n  const getStyles = useStyles<IndicatorFactory>({\n    name: \"Indicator\",\n    classes,\n    props,\n    className,\n    style,\n    classNames,\n    styles,\n    unstyled,\n    vars,\n    varsResolver,\n  });\n\n  return (\n    <Box ref={ref} {...getStyles(\"root\")} mod={{ inline }} {...others}>\n      {!disabled && (\n        <>\n          <Box\n            mod={{\n              \"with-label\": !!label,\n              \"with-border\": withBorder,\n              processing,\n            }}\n            {...getStyles(\"indicator\")}\n          >\n            {label}\n          </Box>\n        </>\n      )}\n      {children}\n    </Box>\n  );\n});\n\nIndicator.classes = classes;\nIndicator.displayName = \"@raikou/core/Indicator\";\n","import { rem } from \"@raikou/core\";\nimport type { IndicatorPosition } from \"../Indicator.types\";\nimport type { IndicatorPositionVariables } from \"../Indicator\";\n\nexport function getPositionVariables(\n  _position: IndicatorPosition = \"top-end\",\n  offset = 0,\n) {\n  const variables: Record<IndicatorPositionVariables, string | undefined> = {\n    \"--indicator-top\": undefined,\n    \"--indicator-bottom\": undefined,\n    \"--indicator-left\": undefined,\n    \"--indicator-right\": undefined,\n    \"--indicator-translate-x\": undefined,\n    \"--indicator-translate-y\": undefined,\n  };\n\n  const _offset = rem(offset);\n  const [position, placement] = _position.split(\"-\");\n\n  if (position === \"top\") {\n    variables[\"--indicator-top\"] = _offset;\n    variables[\"--indicator-translate-y\"] = \"-50%\";\n  }\n\n  if (position === \"middle\") {\n    variables[\"--indicator-top\"] = \"50%\";\n    variables[\"--indicator-translate-y\"] = \"-50%\";\n  }\n\n  if (position === \"bottom\") {\n    variables[\"--indicator-bottom\"] = _offset;\n    variables[\"--indicator-translate-y\"] = \"50%\";\n  }\n\n  if (placement === \"start\") {\n    variables[\"--indicator-left\"] = _offset;\n    variables[\"--indicator-translate-x\"] = \"-50%\";\n  }\n\n  if (placement === \"center\") {\n    variables[\"--indicator-left\"] = \"50%\";\n    variables[\"--indicator-translate-x\"] = \"-50%\";\n  }\n\n  if (placement === \"end\") {\n    variables[\"--indicator-right\"] = _offset;\n    variables[\"--indicator-translate-x\"] = \"50%\";\n  }\n\n  return variables;\n}\n","import \"/Users/paul/development/src/github/raikou/packages/raikou/components/Indicator/src/Indicator.module.css\"; export default {\"root\":\"m-e5262200\",\"indicator\":\"m-760d1fb1\",\"processing\":\"m-885901b1\"}"],"mappings":"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","names":["import_core","React"]}