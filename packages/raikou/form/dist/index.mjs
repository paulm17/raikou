var __defProp=Object.defineProperty,__defProps=Object.defineProperties,__getOwnPropDescs=Object.getOwnPropertyDescriptors,__getOwnPropSymbols=Object.getOwnPropertySymbols,__hasOwnProp=Object.prototype.hasOwnProperty,__propIsEnum=Object.prototype.propertyIsEnumerable,__defNormalProp=(obj,key,value)=>key in obj?__defProp(obj,key,{enumerable:!0,configurable:!0,writable:!0,value:value}):obj[key]=value,__spreadValues=(a,b)=>{for(var prop in b||(b={}))__hasOwnProp.call(b,prop)&&__defNormalProp(a,prop,b[prop]);if(__getOwnPropSymbols)for(var prop of __getOwnPropSymbols(b))__propIsEnum.call(b,prop)&&__defNormalProp(a,prop,b[prop]);return a},__spreadProps=(a,b)=>__defProps(a,__getOwnPropDescs(b)),__objRest=(source,exclude)=>{var target={};for(var prop in source)__hasOwnProp.call(source,prop)&&exclude.indexOf(prop)<0&&(target[prop]=source[prop]);if(null!=source&&__getOwnPropSymbols)for(var prop of __getOwnPropSymbols(source))exclude.indexOf(prop)<0&&__propIsEnum.call(source,prop)&&(target[prop]=source[prop]);return target},__async=(__this,__arguments,generator)=>new Promise(((resolve,reject)=>{var fulfilled=value=>{try{step(generator.next(value))}catch(e){reject(e)}},rejected=value=>{try{step(generator.throw(value))}catch(e){reject(e)}},step=x=>x.done?resolve(x.value):Promise.resolve(x.value).then(fulfilled,rejected);step((generator=generator.apply(__this,__arguments)).next())}));import{useCallback as useCallback6,useState as useState4}from"react";import{useEffect,useLayoutEffect}from"react";function dispatchEvent(type,detail){window.dispatchEvent(new CustomEvent(type,{detail:detail}))}function validateFormName(name){if(!/^[0-9a-zA-Z-]+$/.test(name))throw new Error(`[@raikou/use-form] Form name "${name}" is invalid, it should contain only letters, numbers and dashes`)}var useIsomorphicEffect="undefined"!=typeof window?useLayoutEffect:useEffect;function createFormActions(name){validateFormName(name);return{setFieldValue:(path,value)=>dispatchEvent(`mantine-form:${name}:set-field-value`,{path:path,value:value}),setValues:values=>dispatchEvent(`mantine-form:${name}:set-values`,values),setInitialValues:values=>dispatchEvent(`mantine-form:${name}:set-initial-values`,values),setErrors:errors=>dispatchEvent(`mantine-form:${name}:set-errors`,errors),setFieldError:(path,error)=>dispatchEvent(`mantine-form:${name}:set-field-error`,{path:path,error:error}),clearFieldError:path=>dispatchEvent(`mantine-form:${name}:clear-field-error`,path),clearErrors:()=>dispatchEvent(`mantine-form:${name}:clear-errors`),reset:()=>dispatchEvent(`mantine-form:${name}:reset`),validate:()=>dispatchEvent(`mantine-form:${name}:validate`),validateField:path=>dispatchEvent(`mantine-form:${name}:validate-field`,path),reorderListItem:(path,payload)=>dispatchEvent(`mantine-form:${name}:reorder-list-item`,{path:path,payload:payload}),removeListItem:(path,index)=>dispatchEvent(`mantine-form:${name}:remove-list-item`,{path:path,index:index}),insertListItem:(path,item,index)=>dispatchEvent(`mantine-form:${name}:insert-list-item`,{path:path,index:index,item:item}),setDirty:value=>dispatchEvent(`mantine-form:${name}:set-dirty`,value),setTouched:value=>dispatchEvent(`mantine-form:${name}:set-touched`,value),resetDirty:values=>dispatchEvent(`mantine-form:${name}:reset-dirty`,values),resetTouched:()=>dispatchEvent(`mantine-form:${name}:reset-touched`)}}function useFormEvent(eventKey,handler){useIsomorphicEffect((()=>{if(eventKey)return window.addEventListener(eventKey,handler),()=>window.removeEventListener(eventKey,handler)}),[eventKey])}function useFormActions(name,form){name&&validateFormName(name),useFormEvent(`mantine-form:${name}:set-field-value`,(event=>form.setFieldValue(event.detail.path,event.detail.value))),useFormEvent(`mantine-form:${name}:set-values`,(event=>form.setValues(event.detail))),useFormEvent(`mantine-form:${name}:set-initial-values`,(event=>form.setInitialValues(event.detail))),useFormEvent(`mantine-form:${name}:set-errors`,(event=>form.setErrors(event.detail))),useFormEvent(`mantine-form:${name}:set-field-error`,(event=>form.setFieldError(event.detail.path,event.detail.error))),useFormEvent(`mantine-form:${name}:clear-field-error`,(event=>form.clearFieldError(event.detail))),useFormEvent(`mantine-form:${name}:clear-errors`,form.clearErrors),useFormEvent(`mantine-form:${name}:reset`,form.reset),useFormEvent(`mantine-form:${name}:validate`,form.validate),useFormEvent(`mantine-form:${name}:validate-field`,(event=>form.validateField(event.detail))),useFormEvent(`mantine-form:${name}:reorder-list-item`,(event=>form.reorderListItem(event.detail.path,event.detail.payload))),useFormEvent(`mantine-form:${name}:remove-list-item`,(event=>form.removeListItem(event.detail.path,event.detail.index))),useFormEvent(`mantine-form:${name}:insert-list-item`,(event=>form.insertListItem(event.detail.path,event.detail.item,event.detail.index))),useFormEvent(`mantine-form:${name}:set-dirty`,(event=>form.setDirty(event.detail))),useFormEvent(`mantine-form:${name}:set-touched`,(event=>form.setTouched(event.detail))),useFormEvent(`mantine-form:${name}:reset-dirty`,(event=>form.resetDirty(event.detail))),useFormEvent(`mantine-form:${name}:reset-touched`,form.resetTouched)}function getInputOnChange(setValue){return val=>{if(val)if("function"==typeof val)setValue(val);else if("object"==typeof val&&"nativeEvent"in val){const{currentTarget:currentTarget}=val;currentTarget instanceof HTMLInputElement?"checkbox"===currentTarget.type?setValue(currentTarget.checked):setValue(currentTarget.value):(currentTarget instanceof HTMLTextAreaElement||currentTarget instanceof HTMLSelectElement)&&setValue(currentTarget.value)}else setValue(val);else setValue(val)}}import{useCallback,useRef,useState}from"react";function filterErrors(errors){return null===errors||"object"!=typeof errors?{}:Object.keys(errors).reduce(((acc,key)=>{const errorValue=errors[key];return null!=errorValue&&!1!==errorValue&&(acc[key]=errorValue),acc}),{})}function useFormErrors(initialErrors){const[errorsState,setErrorsState]=useState(filterErrors(initialErrors)),errorsRef=useRef(errorsState),setErrors=useCallback((errors=>{setErrorsState((current=>{const newErrors=filterErrors("function"==typeof errors?errors(current):errors);return errorsRef.current=newErrors,newErrors}))}),[]),clearErrors=useCallback((()=>setErrors({})),[]),clearFieldError=useCallback((path=>{void 0!==errorsRef.current[path]&&setErrors((current=>{const errors=__spreadValues({},current);return delete errors[path],errors}))}),[errorsState]),setFieldError=useCallback(((path,error)=>{null==error||!1===error?clearFieldError(path):errorsRef.current[path]!==error&&setErrors((current=>__spreadProps(__spreadValues({},current),{[path]:error})))}),[errorsState]);return{errorsState:errorsState,setErrors:setErrors,clearErrors:clearErrors,setFieldError:setFieldError,clearFieldError:clearFieldError}}import{useCallback as useCallback2}from"react";function clearListState(field,state){if(null===state||"object"!=typeof state)return{};const clone=__spreadValues({},state);return Object.keys(state).forEach((errorKey=>{errorKey.includes(`${String(field)}.`)&&delete clone[errorKey]})),clone}function getIndexFromKeyAfterPath(key,path){const split=key.substring(path.length+1).split(".")[0];return parseInt(split,10)}function changeErrorIndices(path,index,errors,change){if(void 0===index)return errors;const pathString=`${String(path)}`;let clearedErrors=errors;-1===change&&(clearedErrors=clearListState(`${pathString}.${index}`,clearedErrors));const cloned=__spreadValues({},clearedErrors),changedKeys=new Set;return Object.entries(clearedErrors).filter((([key])=>{if(!key.startsWith(`${pathString}.`))return!1;const currIndex=getIndexFromKeyAfterPath(key,pathString);return!Number.isNaN(currIndex)&&currIndex>=index})).forEach((([key,value])=>{const currIndex=getIndexFromKeyAfterPath(key,pathString),newKey=key.replace(`${pathString}.${currIndex}`,`${pathString}.${currIndex+change}`);cloned[newKey]=value,changedKeys.add(newKey),changedKeys.has(key)||delete cloned[key]})),cloned}function reorderErrors(path,{from:from,to:to},errors){const oldKeyStart=`${path}.${from}`,newKeyStart=`${path}.${to}`,clone=__spreadValues({},errors);return Object.keys(errors).every((key=>{let oldKey,newKey;if(key.startsWith(oldKeyStart)&&(oldKey=key,newKey=key.replace(oldKeyStart,newKeyStart)),key.startsWith(newKeyStart)&&(oldKey=key.replace(newKeyStart,oldKeyStart),newKey=key),oldKey&&newKey){const value1=clone[oldKey],value2=clone[newKey];return void 0===value2?delete clone[oldKey]:clone[oldKey]=value2,void 0===value1?delete clone[newKey]:clone[newKey]=value1,!1}return!0})),clone}function getSplittedPath(path){return"string"!=typeof path?[]:path.split(".")}function getPath(path,values){const splittedPath=getSplittedPath(path);if(0===splittedPath.length||"object"!=typeof values||null===values)return;let value=values[splittedPath[0]];for(let i=1;i<splittedPath.length&&void 0!==value;i+=1)value=value[splittedPath[i]];return value}import{klona}from"klona/full";function setPath(path,value,values){const splittedPath=getSplittedPath(path);if(0===splittedPath.length)return values;const cloned=klona(values);if(1===splittedPath.length)return cloned[splittedPath[0]]=value,cloned;let val=cloned[splittedPath[0]];for(let i=1;i<splittedPath.length-1;i+=1){if(void 0===val)return cloned;val=val[splittedPath[i]]}return val[splittedPath[splittedPath.length-1]]=value,cloned}function reorderPath(path,{from:from,to:to},values){const currentValue=getPath(path,values);if(!Array.isArray(currentValue))return values;const cloned=[...currentValue],item=currentValue[from];return cloned.splice(from,1),cloned.splice(to,0,item),setPath(path,cloned,values)}function insertPath(path,value,index,values){const currentValue=getPath(path,values);if(!Array.isArray(currentValue))return values;const cloned=[...currentValue];return cloned.splice("number"==typeof index?index:cloned.length,0,value),setPath(path,cloned,values)}function removePath(path,index,values){const currentValue=getPath(path,values);return Array.isArray(currentValue)?setPath(path,currentValue.filter(((_,itemIndex)=>itemIndex!==index)),values):values}function getDataPath(formName,fieldPath){return formName?`${formName}-${fieldPath.toString()}`:fieldPath.toString()}function useFormList({$values:$values,$errors:$errors,$status:$status}){return{reorderListItem:useCallback2(((path,payload)=>{$status.clearFieldDirty(path),$errors.setErrors((errs=>reorderErrors(path,payload,errs))),$values.setValues({values:reorderPath(path,payload,$values.refValues.current),updateState:!0})}),[]),removeListItem:useCallback2(((path,index)=>{$status.clearFieldDirty(path),$errors.setErrors((errs=>changeErrorIndices(path,index,errs,-1))),$values.setValues({values:removePath(path,index,$values.refValues.current),updateState:!0})}),[]),insertListItem:useCallback2(((path,item,index)=>{$status.clearFieldDirty(path),$errors.setErrors((errs=>changeErrorIndices(path,index,errs,1))),$values.setValues({values:insertPath(path,item,index,$values.refValues.current),updateState:!0})}),[])}}import{useCallback as useCallback3,useRef as useRef2,useState as useState2}from"react";import isEqual from"fast-deep-equal";function getStatus(status,path){const paths=Object.keys(status);if("string"==typeof path){const nestedPaths=paths.filter((statusPath=>statusPath.startsWith(`${path}.`)));return status[path]||nestedPaths.some((statusPath=>status[statusPath]))||!1}return paths.some((statusPath=>status[statusPath]))}function useFormStatus({initialDirty:initialDirty,initialTouched:initialTouched,mode:mode,$values:$values}){const[touchedState,setTouchedState]=useState2(initialTouched),[dirtyState,setDirtyState]=useState2(initialDirty),touchedRef=useRef2(initialTouched),dirtyRef=useRef2(initialDirty),setTouched=useCallback3((values=>{const resolvedValues="function"==typeof values?values(touchedRef.current):values;touchedRef.current=resolvedValues,"controlled"===mode&&setTouchedState(resolvedValues)}),[]),setDirty=useCallback3((values=>{const resolvedValues="function"==typeof values?values(dirtyRef.current):values;dirtyRef.current=resolvedValues,"controlled"===mode&&setDirtyState(resolvedValues)}),[]),resetTouched=useCallback3((()=>setTouched({})),[]),setFieldTouched=useCallback3(((path,touched)=>{setTouched((currentTouched=>getStatus(currentTouched,path)===touched?currentTouched:__spreadProps(__spreadValues({},currentTouched),{[path]:touched})))}),[]),setFieldDirty=useCallback3(((path,dirty)=>{setDirty((currentDirty=>getStatus(currentDirty,path)===dirty?currentDirty:__spreadProps(__spreadValues({},currentDirty),{[path]:dirty})))}),[]),isTouched=useCallback3((path=>getStatus(touchedRef.current,path)),[]),clearFieldDirty=useCallback3((path=>setDirty((current=>{if("string"!=typeof path)return current;const result=clearListState(path,current);return delete result[path],isEqual(result,current)?current:result}))),[]),isDirty=useCallback3((path=>{if(path){const overriddenValue=getPath(path,dirtyRef.current);if("boolean"==typeof overriddenValue)return overriddenValue;const sliceOfValues=getPath(path,$values.refValues.current),sliceOfInitialValues=getPath(path,$values.valuesSnapshot.current);return!isEqual(sliceOfValues,sliceOfInitialValues)}return Object.keys(dirtyRef.current).length>0?getStatus(dirtyRef.current):!isEqual($values.refValues.current,$values.valuesSnapshot.current)}),[]),getDirty=useCallback3((()=>dirtyRef.current),[]),getTouched=useCallback3((()=>touchedRef.current),[]);return{touchedState:touchedState,dirtyState:dirtyState,touchedRef:touchedRef,dirtyRef:dirtyRef,setTouched:setTouched,setDirty:setDirty,resetDirty:values=>{const newSnapshot=values?__spreadValues(__spreadValues({},values),$values.refValues.current):$values.refValues.current;$values.setValuesSnapshot(newSnapshot),setDirty({})},resetTouched:resetTouched,isTouched:isTouched,setFieldTouched:setFieldTouched,setFieldDirty:setFieldDirty,setTouchedState:setTouchedState,setDirtyState:setDirtyState,clearFieldDirty:clearFieldDirty,isDirty:isDirty,getDirty:getDirty,getTouched:getTouched}}import{useCallback as useCallback4,useRef as useRef3,useState as useState3}from"react";function useFormValues({initialValues:initialValues,onValuesChange:onValuesChange,mode:mode}){const initialized=useRef3(!1),[stateValues,setStateValues]=useState3(initialValues||{}),refValues=useRef3(stateValues),valuesSnapshot=useRef3(stateValues),setValues=useCallback4((({values:values,subscribers:subscribers,updateState:updateState=!0,mergeWithPreviousValues:mergeWithPreviousValues=!0})=>{const previousValues=refValues.current,resolvedValues=values instanceof Function?values(refValues.current):values,updatedValues=mergeWithPreviousValues?__spreadValues(__spreadValues({},previousValues),resolvedValues):resolvedValues;refValues.current=updatedValues,updateState&&setStateValues(updatedValues),null==onValuesChange||onValuesChange(updatedValues,previousValues),null==subscribers||subscribers.filter(Boolean).forEach((subscriber=>subscriber({updatedValues:updatedValues,previousValues:previousValues})))}),[onValuesChange]),setFieldValue=useCallback4((payload=>{var _a;const currentValue=getPath(payload.path,refValues.current),updatedValue=payload.value instanceof Function?payload.value(currentValue):payload.value;if(currentValue!==updatedValue){const previousValues=refValues.current,updatedValues=setPath(payload.path,updatedValue,refValues.current);setValues({values:updatedValues,updateState:payload.updateState}),null==(_a=payload.subscribers)||_a.filter(Boolean).forEach((subscriber=>subscriber({path:payload.path,updatedValues:updatedValues,previousValues:previousValues})))}}),[]),setValuesSnapshot=useCallback4((payload=>{valuesSnapshot.current=payload}),[]),initialize=useCallback4(((values,onInitialize)=>{initialized.current||(initialized.current=!0,setValues({values:values,updateState:"controlled"===mode}),setValuesSnapshot(values),onInitialize())}),[]),resetValues=useCallback4((()=>{setValues({values:valuesSnapshot.current,updateState:!0,mergeWithPreviousValues:!1})}),[]),getValues=useCallback4((()=>refValues.current),[]);return{initialized:initialized,stateValues:stateValues,refValues:refValues,valuesSnapshot:valuesSnapshot,setValues:setValues,setFieldValue:setFieldValue,resetValues:resetValues,setValuesSnapshot:setValuesSnapshot,initialize:initialize,getValues:getValues}}import{useCallback as useCallback5,useEffect as useEffect2,useRef as useRef4}from"react";function useFormWatch({$status:$status}){const subscribers=useRef4({}),watch=useCallback5(((path,callback)=>{useEffect2((()=>(subscribers.current[path]=subscribers.current[path]||[],subscribers.current[path].push(callback),()=>{subscribers.current[path]=subscribers.current[path].filter((cb=>cb!==callback))})),[callback])}),[]),getFieldSubscribers=useCallback5((path=>subscribers.current[path]?subscribers.current[path].map((callback=>input=>callback({previousValue:getPath(path,input.previousValues),value:getPath(path,input.updatedValues),touched:$status.isTouched(path),dirty:$status.isDirty(path)}))):[]),[]);return{subscribers:subscribers,watch:watch,getFieldSubscribers:getFieldSubscribers}}function getValidationResults(errors){const filteredErrors=filterErrors(errors);return{hasErrors:Object.keys(filteredErrors).length>0,errors:filteredErrors}}function validateRulesRecord(rules,values,path="",errors={}){return"object"!=typeof rules||null===rules?errors:Object.keys(rules).reduce(((acc,ruleKey)=>{const rule=rules[ruleKey],rulePath=`${""===path?"":`${path}.`}${ruleKey}`,value=getPath(rulePath,values);let arrayValidation=!1;return"function"==typeof rule&&(acc[rulePath]=rule(value,values,rulePath)),"object"==typeof rule&&Array.isArray(value)&&(arrayValidation=!0,value.forEach(((_item,index)=>validateRulesRecord(rule,values,`${rulePath}.${index}`,acc)))),"object"==typeof rule&&"object"==typeof value&&null!==value&&(arrayValidation||validateRulesRecord(rule,values,rulePath,acc)),acc}),errors)}function validateValues(validate,values){return getValidationResults("function"==typeof validate?validate(values):validateRulesRecord(validate,values))}function validateFieldValue(path,rules,values){if("string"!=typeof path)return{hasError:!1,error:null};const results=validateValues(rules,values),pathInError=Object.keys(results.errors).find((errorKey=>path.split(".").every(((pathPart,i)=>pathPart===errorKey.split(".")[i]))));return{hasError:!!pathInError,error:pathInError?results.errors[pathInError]:null}}var FORM_INDEX="__MANTINE_FORM_INDEX__";function shouldValidateOnChange(path,validateInputOnChange){return!!validateInputOnChange&&("boolean"==typeof validateInputOnChange?validateInputOnChange:!!Array.isArray(validateInputOnChange)&&validateInputOnChange.includes(path.replace(/[.][0-9]/g,`.${FORM_INDEX}`)))}function useForm({name:name,mode:mode="controlled",initialValues:initialValues,initialErrors:initialErrors={},initialDirty:initialDirty={},initialTouched:initialTouched={},clearInputErrorOnChange:clearInputErrorOnChange=!0,validateInputOnChange:validateInputOnChange=!1,validateInputOnBlur:validateInputOnBlur=!1,onValuesChange:onValuesChange,transformValues:transformValues=(values=>values),enhanceGetInputProps:enhanceGetInputProps,validate:rules}={}){const $errors=useFormErrors(initialErrors),$values=useFormValues({initialValues:initialValues,onValuesChange:onValuesChange,mode:mode}),$status=useFormStatus({initialDirty:initialDirty,initialTouched:initialTouched,$values:$values,mode:mode}),$list=useFormList({$values:$values,$errors:$errors,$status:$status}),$watch=useFormWatch({$status:$status}),[formKey,setFormKey]=useState4(0),[fieldKeys,setFieldKeys]=useState4({}),reset=useCallback6((()=>{$values.resetValues(),$errors.clearErrors(),$status.resetDirty(),$status.resetTouched(),"uncontrolled"===mode&&setFormKey((key2=>key2+1))}),[]),initialize=useCallback6((values=>{$values.initialize(values,(()=>"uncontrolled"===mode&&setFormKey((key2=>key2+1))))}),[]),setFieldValue=useCallback6(((path,value,options)=>{const shouldValidate=shouldValidateOnChange(path,validateInputOnChange);$status.clearFieldDirty(path),$status.setFieldTouched(path,!0),!shouldValidate&&clearInputErrorOnChange&&$errors.clearFieldError(path),$values.setFieldValue({path:path,value:value,updateState:"controlled"===mode,subscribers:[...$watch.getFieldSubscribers(path),shouldValidate?payload=>{const validationResults=validateFieldValue(path,rules,payload.updatedValues);validationResults.hasError?$errors.setFieldError(path,validationResults.error):$errors.clearFieldError(path)}:null,!1!==(null==options?void 0:options.forceUpdate)&&"controlled"!==mode?()=>setFieldKeys((keys=>__spreadProps(__spreadValues({},keys),{[path]:(keys[path]||0)+1}))):null]})}),[onValuesChange,rules]),setValues=useCallback6((values=>{const previousValues=$values.refValues.current;$values.setValues({values:values,updateState:"controlled"===mode}),clearInputErrorOnChange&&$errors.clearErrors(),"uncontrolled"===mode&&setFormKey((key2=>key2+1)),Object.keys($watch.subscribers.current).forEach((path=>{getPath(path,$values.refValues.current)!==getPath(path,previousValues)&&$watch.getFieldSubscribers(path).forEach((cb=>cb({previousValues:previousValues,updatedValues:$values.refValues.current})))}))}),[onValuesChange,clearInputErrorOnChange]),validate=useCallback6((()=>{const results=validateValues(rules,$values.refValues.current);return $errors.setErrors(results.errors),results}),[rules]),validateField=useCallback6((path=>{const results=validateFieldValue(path,rules,$values.refValues.current);return results.hasError?$errors.setFieldError(path,results.error):$errors.clearFieldError(path),results}),[rules]),onReset=useCallback6((event=>{event.preventDefault(),reset()}),[]),isValid=useCallback6((path=>path?!validateFieldValue(path,rules,$values.refValues.current).hasError:!validateValues(rules,$values.refValues.current).hasErrors),[rules]),getInputNode=useCallback6((path=>document.querySelector(`[data-path="${getDataPath(name,path)}"]`)),[]),form={watch:$watch.watch,initialized:$values.initialized.current,values:$values.stateValues,getValues:$values.getValues,setInitialValues:$values.setValuesSnapshot,initialize:initialize,setValues:setValues,setFieldValue:setFieldValue,errors:$errors.errorsState,setErrors:$errors.setErrors,setFieldError:$errors.setFieldError,clearFieldError:$errors.clearFieldError,clearErrors:$errors.clearErrors,resetDirty:$status.resetDirty,setTouched:$status.setTouched,setDirty:$status.setDirty,isTouched:$status.isTouched,resetTouched:$status.resetTouched,isDirty:$status.isDirty,getTouched:$status.getTouched,getDirty:$status.getDirty,reorderListItem:$list.reorderListItem,insertListItem:$list.insertListItem,removeListItem:$list.removeListItem,reset:reset,validate:validate,validateField:validateField,getInputProps:(path,_a={})=>{var _b=_a,{type:type="input",withError:withError=!0,withFocus:withFocus=!0}=_b,otherOptions=__objRest(_b,["type","withError","withFocus"]);const payload={onChange:getInputOnChange((value=>setFieldValue(path,value,{forceUpdate:!1}))),"data-path":getDataPath(name,path)};return withError&&(payload.error=$errors.errorsState[path]),"checkbox"===type?payload["controlled"===mode?"checked":"defaultChecked"]=getPath(path,$values.refValues.current):payload["controlled"===mode?"value":"defaultValue"]=getPath(path,$values.refValues.current),withFocus&&(payload.onFocus=()=>$status.setFieldTouched(path,!0),payload.onBlur=()=>{if(shouldValidateOnChange(path,validateInputOnBlur)){const validationResults=validateFieldValue(path,rules,$values.refValues.current);validationResults.hasError?$errors.setFieldError(path,validationResults.error):$errors.clearFieldError(path)}}),Object.assign(payload,null==enhanceGetInputProps?void 0:enhanceGetInputProps({inputProps:payload,field:path,options:__spreadValues({type:type,withError:withError,withFocus:withFocus},otherOptions),form:form}))},onSubmit:(handleSubmit,handleValidationFailure)=>event=>{null==event||event.preventDefault();const results=validate();results.hasErrors?null==handleValidationFailure||handleValidationFailure(results.errors,$values.refValues.current,event):null==handleSubmit||handleSubmit(transformValues($values.refValues.current),event)},onReset:onReset,isValid:isValid,getTransformedValues:input=>transformValues(input||$values.refValues.current),key:path=>`${formKey}-${path}-${fieldKeys[path]||0}`,getInputNode:getInputNode};return useFormActions(name,form),form}import React,{createContext,useContext}from"react";function createFormContext(){const FormContext=createContext(null);return[function({form:form,children:children}){return React.createElement(FormContext.Provider,{value:form},children)},function(){const ctx=useContext(FormContext);if(!ctx)throw new Error("useFormContext was called outside of FormProvider context");return ctx},useForm]}import React2,{forwardRef}from"react";var Form=forwardRef(((_a,ref)=>{var _b=_a,{form:form,onSubmit:onSubmit,onReset:onReset}=_b,others=__objRest(_b,["form","onSubmit","onReset"]);return React2.createElement("form",__spreadProps(__spreadValues({},others),{onSubmit:form.onSubmit("function"==typeof onSubmit?onSubmit:()=>{}),onReset:event=>{null==onReset||onReset(event),form.onReset(event)},ref:ref}))}));function isNotEmpty(error){const _error=error||!0;return value=>"string"==typeof value?value.trim().length>0?null:_error:Array.isArray(value)?value.length>0?null:_error:null==value||!1===value?_error:null}function matches(regexp,error){const _error=error||!0;return value=>"string"!=typeof value?_error:regexp.test(value)?null:_error}function isEmail(error){return matches(/^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/,error)}function isLengthValid(payload,value){if("number"==typeof payload)return value.length===payload;const{max:max,min:min}=payload;let valid=!0;return"number"==typeof max&&value.length>max&&(valid=!1),"number"==typeof min&&value.length<min&&(valid=!1),valid}function hasLength(payload,error){const _error=error||!0;return value=>"string"==typeof value?isLengthValid(payload,value.trim())?null:_error:"object"==typeof value&&null!==value&&"length"in value&&isLengthValid(payload,value)?null:_error}function isInRange({min:min,max:max},error){const _error=error||!0;return value=>{if("number"!=typeof value)return _error;let valid=!0;return"number"==typeof min&&value<min&&(valid=!1),"number"==typeof max&&value>max&&(valid=!1),valid?null:_error}}function matchesField(field,error){const _error=error||!0;return(value,values)=>values&&field in values&&value===values[field]?null:_error}import{useCallback as useCallback7,useMemo,useRef as useRef5,useState as useState5}from"react";function useField({mode:mode="controlled",clearErrorOnChange:clearErrorOnChange=!0,initialValue:initialValue,initialError:initialError=null,initialTouched:initialTouched=!1,onValueChange:onValueChange,validateOnChange:validateOnChange=!1,validateOnBlur:validateOnBlur=!1,validate:validate,resolveValidationError:resolveValidationError,type:type="input"}){const[valueState,setValueState]=useState5(initialValue),valueRef=useRef5(valueState),[key,setKey]=useState5(0),[error,setError]=useState5(initialError||null),touchedRef=useRef5(initialTouched||!1),[,setTouchedState]=useState5(touchedRef.current),[isValidating,setIsValidating]=useState5(!1),errorResolver=useMemo((()=>resolveValidationError||(err=>err)),[resolveValidationError]),setTouched=useCallback7(((val,{updateState:updateState="controlled"===mode}={})=>{touchedRef.current=val,updateState&&setTouchedState(val)}),[]),setValue=useCallback7(((_0,..._1)=>__async(this,[_0,..._1],(function*(value,{updateKey:updateKey="uncontrolled"===mode,updateState:updateState="controlled"===mode}={}){valueRef.current!==value&&(valueRef.current=value,null==onValueChange||onValueChange(value),clearErrorOnChange&&null!==error&&setError(null),updateState&&setValueState(value),updateKey&&setKey((currentKey=>currentKey+1)),validateOnChange&&_validate())}))),[error,clearErrorOnChange]),reset=useCallback7((()=>{setValue(initialValue),setError(null),setTouched(!1)}),[initialValue]),getValue=useCallback7((()=>valueRef.current),[]),isTouched=useCallback7((()=>touchedRef.current),[]),isDirty=useCallback7((()=>valueRef.current!==initialValue),[initialValue]),_validate=useCallback7((()=>__async(this,null,(function*(){const validationResult=null==validate?void 0:validate(valueRef.current);if(!(validationResult instanceof Promise))return setError(validationResult),validationResult;setIsValidating(!0);try{const result=yield validationResult;setIsValidating(!1),setError(result)}catch(err){setIsValidating(!1);const resolvedError=errorResolver(err);return setError(resolvedError),resolvedError}}))),[]),resetTouched=useCallback7((()=>setTouched(!1)),[]);return{key:key,getValue:getValue,setValue:setValue,reset:reset,getInputProps:({withError:withError=!0,withFocus:withFocus=!0}={})=>{const payload={onChange:getInputOnChange((val=>setValue(val,{updateKey:!1})))};return withError&&(payload.error=error),"checkbox"===type?payload["controlled"===mode?"checked":"defaultChecked"]=valueRef.current:payload["controlled"===mode?"value":"defaultValue"]=valueRef.current,withFocus&&(payload.onFocus=()=>{setTouched(!0)},payload.onBlur=()=>{shouldValidateOnChange("",!!validateOnBlur)&&_validate()}),payload},isValidating:isValidating,validate:_validate,error:error,setError:setError,isTouched:isTouched,isDirty:isDirty,resetTouched:resetTouched}}function zodResolver(schema){return values=>{const parsed=schema.safeParse(values);if(parsed.success)return{};const results={};return parsed.error.errors.forEach((error=>{results[error.path.join(".")]=error.message})),results}}function superstructResolver(schema){return function(values){const formErrors={},[err]=schema.validate(values);return err?(err.failures().forEach((fieldFailure=>{const fieldName=fieldFailure.path.join(" ");formErrors[fieldFailure.path.join(".")]=`${fieldName}: ${fieldFailure.message}`})),formErrors):formErrors}}function yupResolver(schema){const _schema=schema;return values=>{try{return _schema.validateSync(values,{abortEarly:!1}),{}}catch(_yupError){const results={};return _yupError.inner.forEach((error=>{results[error.path.replaceAll("[",".").replaceAll("]","")]=error.message})),results}}}function joiResolver(schema,options){const _schema=schema;return values=>{const parsed=_schema.validate(values,__spreadValues({abortEarly:!1},options));if(!parsed.error)return{};const results={};return parsed.error.details.forEach((error=>{results[error.path.join(".")]=error.message})),results}}export{FORM_INDEX,Form,createFormActions,createFormContext,hasLength,isEmail,isInRange,isNotEmpty,joiResolver,matches,matchesField,superstructResolver,useField,useForm,yupResolver,zodResolver};